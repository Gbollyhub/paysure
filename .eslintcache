[{"C:\\Users\\Admin\\Documents\\paysure-core\\src\\index.js":"1","C:\\Users\\Admin\\Documents\\paysure-core\\src\\App.js":"2","C:\\Users\\Admin\\Documents\\paysure-core\\src\\reportWebVitals.js":"3","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\login\\login.js":"4","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\overview\\overview.js":"5","C:\\Users\\Admin\\Documents\\paysure-core\\src\\components\\leftbar\\leftbar.js":"6","C:\\Users\\Admin\\Documents\\paysure-core\\src\\components\\topbar\\topbar.js":"7","C:\\Users\\Admin\\Documents\\paysure-core\\src\\components\\rightbar\\rightbar.js":"8","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\dashboard.js":"9","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\service-providers\\service-providers.js":"10","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\user-management\\user.js":"11","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\api-management\\api.js":"12","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\service-providers\\provider\\provider.js":"13","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\service-providers\\provider\\overview.js":"14","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\service-providers\\provider\\transactions.js":"15","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\service-providers\\provider\\settlements.js":"16","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\api-management\\request.js":"17","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\api-management\\services.js":"18","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\api-management\\service.js":"19","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\user-management\\users.js":"20","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\user-management\\Roles\\roles.js":"21","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\user-management\\Roles\\createRoles.js":"22","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\user-management\\Roles\\editRoles.js":"23","C:\\Users\\Admin\\Documents\\paysure-core\\src\\components\\ui\\errorAlert\\errorAlert.js":"24","C:\\Users\\Admin\\Documents\\paysure-core\\src\\globalApi.js":"25","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\organisations.js":"26","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\organisation\\organisation.js":"27","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\organisation\\overview.js":"28","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\organisation\\merchants.js":"29","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\services\\services.js":"30","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\service-providers\\addProvider.js":"31","C:\\Users\\Admin\\Documents\\paysure-core\\src\\components\\ui\\caution\\caution.js":"32","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\settings\\settings.js":"33","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\settings\\band\\bands.js":"34","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\settings\\band\\createBand.js":"35","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\settings\\band\\updateBand.js":"36","C:\\Users\\Admin\\Documents\\paysure-core\\src\\components\\ui\\loader\\loader.js":"37","C:\\Users\\Admin\\Documents\\paysure-core\\src\\components\\ui\\state\\state.js":"38","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\organisation\\merchant\\merchant.js":"39","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\organisation\\merchant\\overview.js":"40","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\organisation\\merchant\\transactions.js":"41","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\organisation\\merchant\\users.js":"42","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\user-management\\Roles\\addPermission.js":"43","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\addOrganisation.js":"44","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\orgForm.js":"45","C:\\Users\\Admin\\Documents\\paysure-core\\src\\components\\ui\\state\\state2.js":"46","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\organisation\\addMerchant.js":"47","C:\\Users\\Admin\\Documents\\paysure-core\\src\\components\\ui\\emptyData\\emptyData.js":"48","C:\\Users\\Admin\\Documents\\paysure-core\\src\\utils.js":"49","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\user-management\\addUser.js":"50","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\settings\\terminal\\terminal.js":"51","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\service-providers\\provider\\charges.js":"52","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\service-providers\\provider\\editProvider.js":"53","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\service-providers\\provider\\fundProvider.js":"54","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\transactions\\transactions.js":"55","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\transactions\\viewTrans.js":"56","C:\\Users\\Admin\\Documents\\paysure-core\\src\\helpers\\axios.js":"57","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\Export.js":"58","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\service-providers\\provider\\viewTrans.js":"59","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\organisation\\merchant\\viewTrans.js":"60","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\organisation\\merchant\\addPermission.js":"61","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\settings\\config\\config.js":"62"},{"size":478,"mtime":1611154997914,"results":"63","hashOfConfig":"64"},{"size":1910,"mtime":1621967943641,"results":"65","hashOfConfig":"64"},{"size":362,"mtime":499162500000,"results":"66","hashOfConfig":"64"},{"size":3891,"mtime":1623538394323,"results":"67","hashOfConfig":"64"},{"size":12247,"mtime":1623796305054,"results":"68","hashOfConfig":"64"},{"size":2349,"mtime":1622372013762,"results":"69","hashOfConfig":"64"},{"size":547,"mtime":1611146053511,"results":"70","hashOfConfig":"64"},{"size":778,"mtime":1611146047131,"results":"71","hashOfConfig":"64"},{"size":5119,"mtime":1611147338501,"results":"72","hashOfConfig":"64"},{"size":6288,"mtime":1622389836306,"results":"73","hashOfConfig":"64"},{"size":3016,"mtime":1621043387681,"results":"74","hashOfConfig":"64"},{"size":1630,"mtime":1615128664494,"results":"75","hashOfConfig":"64"},{"size":4069,"mtime":1622390489564,"results":"76","hashOfConfig":"64"},{"size":6926,"mtime":1623517814545,"results":"77","hashOfConfig":"64"},{"size":11293,"mtime":1622298869337,"results":"78","hashOfConfig":"64"},{"size":4891,"mtime":1622298406786,"results":"79","hashOfConfig":"64"},{"size":3340,"mtime":1612023151735,"results":"80","hashOfConfig":"64"},{"size":2460,"mtime":1615129571324,"results":"81","hashOfConfig":"64"},{"size":3514,"mtime":1615128677815,"results":"82","hashOfConfig":"64"},{"size":3718,"mtime":1617722147906,"results":"83","hashOfConfig":"64"},{"size":2583,"mtime":1617722200406,"results":"84","hashOfConfig":"64"},{"size":3520,"mtime":1615128783655,"results":"85","hashOfConfig":"64"},{"size":6831,"mtime":1620478385088,"results":"86","hashOfConfig":"64"},{"size":289,"mtime":1612911012108,"results":"87","hashOfConfig":"64"},{"size":18200,"mtime":1623762181505,"results":"88","hashOfConfig":"64"},{"size":5608,"mtime":1618480773071,"results":"89","hashOfConfig":"64"},{"size":3164,"mtime":1623765688519,"results":"90","hashOfConfig":"64"},{"size":2714,"mtime":1618481065465,"results":"91","hashOfConfig":"64"},{"size":4238,"mtime":1623760742940,"results":"92","hashOfConfig":"64"},{"size":10753,"mtime":1623312080161,"results":"93","hashOfConfig":"64"},{"size":2755,"mtime":1617635452739,"results":"94","hashOfConfig":"64"},{"size":709,"mtime":1623763003335,"results":"95","hashOfConfig":"64"},{"size":2808,"mtime":1623776839813,"results":"96","hashOfConfig":"64"},{"size":4829,"mtime":1617723184888,"results":"97","hashOfConfig":"64"},{"size":3488,"mtime":1616598448178,"results":"98","hashOfConfig":"64"},{"size":3841,"mtime":1616583989605,"results":"99","hashOfConfig":"64"},{"size":292,"mtime":1616276384530,"results":"100","hashOfConfig":"64"},{"size":775,"mtime":1623717161831,"results":"101","hashOfConfig":"64"},{"size":3361,"mtime":1623532515468,"results":"102","hashOfConfig":"64"},{"size":3053,"mtime":1623719461221,"results":"103","hashOfConfig":"64"},{"size":15523,"mtime":1623539737427,"results":"104","hashOfConfig":"64"},{"size":4590,"mtime":1623774253797,"results":"105","hashOfConfig":"64"},{"size":3951,"mtime":1616618952070,"results":"106","hashOfConfig":"64"},{"size":12807,"mtime":1623716825684,"results":"107","hashOfConfig":"64"},{"size":3188,"mtime":1616851337018,"results":"108","hashOfConfig":"64"},{"size":1080,"mtime":1623717171198,"results":"109","hashOfConfig":"64"},{"size":8851,"mtime":1623785772634,"results":"110","hashOfConfig":"64"},{"size":318,"mtime":1617228415410,"results":"111","hashOfConfig":"64"},{"size":38,"mtime":1617576253025,"results":"112","hashOfConfig":"64"},{"size":3228,"mtime":1617635464461,"results":"113","hashOfConfig":"64"},{"size":3076,"mtime":1617723498494,"results":"114","hashOfConfig":"64"},{"size":3594,"mtime":1618170322283,"results":"115","hashOfConfig":"64"},{"size":2843,"mtime":1618171212495,"results":"116","hashOfConfig":"64"},{"size":3299,"mtime":1618171208205,"results":"117","hashOfConfig":"64"},{"size":16122,"mtime":1623540667327,"results":"118","hashOfConfig":"64"},{"size":4610,"mtime":1622389789681,"results":"119","hashOfConfig":"64"},{"size":1142,"mtime":1621969131352,"results":"120","hashOfConfig":"64"},{"size":2488,"mtime":1622380700424,"results":"121","hashOfConfig":"64"},{"size":4581,"mtime":1622297852400,"results":"122","hashOfConfig":"64"},{"size":4610,"mtime":1623537991703,"results":"123","hashOfConfig":"64"},{"size":6447,"mtime":1623763336236,"results":"124","hashOfConfig":"64"},{"size":10117,"mtime":1623792885439,"results":"125","hashOfConfig":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},"izbo9d",{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"128"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"128"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"128"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"128"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"128"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"128"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"128"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"128"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"128"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"128"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"128"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"128"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"128"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"128"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"228","messages":"229","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"128"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"128"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"128"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"245"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"128"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"128"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Admin\\Documents\\paysure-core\\src\\index.js",[],["274","275"],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\App.js",["276"],"\nimport { BrowserRouter, Route, Switch} from 'react-router-dom'\nimport Login from './pages/login/login'\nimport Overview from './pages/overview/overview'\nimport Organisations from './pages/organisations/organisations'\nimport Organisation from './pages/organisations/organisation/organisation'\nimport Merchant from './pages/organisations/organisation/merchant/merchant'\nimport ServiceProviders from './pages/service-providers/service-providers'\nimport Transactions from './pages/transactions/transactions'\nimport Provider from './pages/service-providers/provider/provider'\nimport ApiManagement from './pages/api-management/api'\nimport ApiService from './pages/api-management/service'\nimport UserManagement from './pages/user-management/user'\nimport CreateRole from './pages/user-management/Roles/createRoles'\nimport EditRole from './pages/user-management/Roles/editRoles'\nimport Settings from './pages/settings/settings'\n\nfunction App() {\n\n  return (\n    <BrowserRouter>\n      <Switch>\n     <Route exact path='/' component = { Login } />  \n     <Route path='/overview' component = { Overview } />  \n     <Route path='/organisations' component = { Organisations } />  \n     <Route path='/organisation/:id' component = { Organisation } />  \n     <Route path='/merchant/:id' component = { Merchant } />  \n     <Route path='/transactions' component = { Transactions } /> \n     <Route path='/service-providers' component = { ServiceProviders } />  \n     <Route path='/service-provider/:id' component = { Provider } /> \n     <Route path='/settings' component = { Settings } /> \n     <Route path='/api-service/:id' component = { ApiService } />  \n     <Route path='/user-management' component = { UserManagement } />   \n     <Route path='/create-role/:id' component = { CreateRole } />   \n     <Route path='/edit-role/:id' component = { EditRole } />   \n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","C:\\Users\\Admin\\Documents\\paysure-core\\src\\reportWebVitals.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\login\\login.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\overview\\overview.js",["277","278","279","280"],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\components\\leftbar\\leftbar.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\components\\topbar\\topbar.js",[],["281","282"],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\components\\rightbar\\rightbar.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\dashboard.js",["283","284","285","286","287"],"\r\nimport React, { Component } from 'react'\r\nimport Leftbar from '../components/leftbar/leftbar'\r\nimport Rightbar from '../components/rightbar/rightbar'\r\nimport Topbar from '../components/topbar/topbar'\r\nimport Overview from './overview/overview'\r\nimport Products from './paysure-products/paysure-products'\r\n\r\nclass Dashboard extends Component {\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"app-admin-section\">\r\n            <div className=\"app-admin-col-1\">\r\n            <Leftbar/>\r\n            </div>\r\n            <div className=\"app-admin-col-2\">\r\n            <Topbar/>\r\n            <div className=\"content-header\">Hii there! Bola</div>\r\n              <div className=\"content-sub\">Here are the latest report on Paysure Digital</div>\r\n              <div data-animation=\"slide\" data-duration=\"500\" data-infinite=\"1\" className=\"content-slider w-slider\">\r\n                <div className=\"mask w-slider-mask\">\r\n                  <div className=\"content-slide w-slide\">\r\n                    <div className=\"content-slide-box\">\r\n                      <div className=\"content-info-card\">\r\n                        <div className=\"div-block-2\">\r\n                          <div className=\"slide-card-header\">Total Revenue</div>\r\n                          <div className=\"slide-card-value\">N200,000</div>\r\n                        </div>\r\n                        <div className=\"slide-card-icon green\"></div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"content-slide w-slide\">\r\n                    <div className=\"content-slide-box\">\r\n                      <div className=\"content-info-card\">\r\n                        <div className=\"div-block-2\">\r\n                          <div className=\"slide-card-header\">Total Revenue</div>\r\n                          <div className=\"slide-card-value\">N200,000</div>\r\n                        </div>\r\n                        <div className=\"slide-card-icon purple\"></div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"content-slide w-slide\">\r\n                    <div className=\"content-slide-box\">\r\n                      <div className=\"content-info-card\">\r\n                        <div className=\"div-block-2\">\r\n                          <div className=\"slide-card-header\">Total Revenue</div>\r\n                          <div className=\"slide-card-value\">N200,000</div>\r\n                        </div>\r\n                        <div className=\"slide-card-icon blue\"></div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"content-slide w-slide\">\r\n                    <div className=\"content-slide-box\">\r\n                      <div className=\"content-info-card\">\r\n                        <div className=\"div-block-2\">\r\n                          <div className=\"slide-card-header\">Total Revenue</div>\r\n                          <div className=\"slide-card-value\">N200,000</div>\r\n                        </div>\r\n                        <div className=\"slide-card-icon yellow\"></div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"content-slide w-slide\">\r\n                    <div className=\"content-slide-box\">\r\n                      <div className=\"content-info-card\">\r\n                        <div className=\"div-block-2\">\r\n                          <div className=\"slide-card-header\">Total Revenue</div>\r\n                          <div className=\"slide-card-value\">N200,000</div>\r\n                        </div>\r\n                        <div className=\"slide-card-icon red\"></div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"content-slider-left-arrow w-slider-arrow-left\">\r\n                  <div className=\"w-icon-slider-left\"></div>\r\n                </div>\r\n                <div className=\"content-slider-right-arrow w-slider-arrow-right\">\r\n                  <div className=\"w-icon-slider-right\"></div>\r\n                </div>\r\n                <div className=\"slide-nav w-slider-nav w-slider-nav-invert w-round\"></div>\r\n              </div>\r\n              <div className=\"basic-table-card\">\r\n                <div className=\"content-header-2\">Business Revenue</div>\r\n                <div className=\"analytics-div\">\r\n                  <div className=\"analytics-graph\"></div>\r\n                  <div className=\"analytics-graph-2\">\r\n                    <div className=\"content-header-3\">Monthly Target</div>\r\n                    <div className=\"content-sub-2\">Average Total Sales</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"basic-table-card\">\r\n                <div className=\"content-header-2\">Users</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"app-admin-col-3\">\r\n              <Rightbar />\r\n            </div>\r\n          </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dashboard",["288","289"],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\service-providers\\service-providers.js",["290","291","292","293","294"],"import React, { useState, useEffect }  from 'react'\r\nimport Leftbar from '../../components/leftbar/leftbar'\r\nimport Rightbar from '../../components/rightbar/rightbar'\r\nimport { Redirect, Link } from 'react-router-dom'\r\nimport { getServiceProviders, getServices } from '../../globalApi'\r\nimport AddProvider from './addProvider'\r\nimport EmptyData from '../../components/ui/emptyData/emptyData'\r\nimport NumberFormat from 'react-number-format';\r\n\r\nfunction ServiceProviders() {\r\n  const [providers, setProviders] = useState([]);\r\n  const [ createProvider, setAddProvider] = useState(false)\r\n  const [updateProvider, setEditProvider] = useState(false)\r\n  const [fundWallet, setFundProvider] = useState(false)\r\n  const [provider, setProvider] = useState({})\r\n  const [services, setServices] = useState([]);\r\n\r\n    useEffect( () => {\r\n      getServices().then(result => setServices(result));\r\n      getServiceProviders().then(result => setProviders(result))\r\n      },[])\r\n\r\n      const toggleAddProvider = () => {\r\n        createProvider ? setAddProvider(false) :  setAddProvider(true)\r\n      }\r\n  \r\n      const toggleEditProvider = async (result) => {\r\n        await setProvider(result)\r\n        updateProvider ? setEditProvider(false) :  setEditProvider(true)\r\n      }\r\n  \r\n      const toggleFundProvider = () => {\r\n        fundWallet ? setFundProvider(false) :  setFundProvider(true)\r\n      }\r\n\r\n      const updateProviderList = (newData) => {\r\n        setProviders([...providers, newData])\r\n        }\r\n\r\n        const searchArray = (e) => {\r\n          getServiceProviders().then(result =>{\r\n              const test = result.filter(result => {\r\n              return result.providerName.toLowerCase().includes(e.target.value.toLowerCase());\r\n            });\r\n  \r\n            setProviders(test);\r\n          \r\n          } )\r\n            \r\n      }\r\n  \r\n    if (!localStorage.getItem(\"token\")) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n        return(\r\n          \r\n            <div className=\"app-admin-section\">\r\n              {\r\n                createProvider ? <AddProvider updateProviderList = {updateProviderList} closeModal = {toggleAddProvider}/> : null\r\n              }\r\n\r\n            <div className=\"app-admin-col-1\">\r\n            <Leftbar/>\r\n            </div>\r\n            <div className=\"app-admin-col-2\">\r\n            <div className=\"admin-top-bar\">\r\n        <div className=\"admin-top-bar-left\">\r\n          <div className=\"settings-icon\"></div>\r\n        </div>\r\n        <div className=\"admin-top-bar-right\">\r\n          <div className=\"admin-topbar-date\">October 8th, 2020</div>\r\n        </div>\r\n      </div>\r\n\r\n            <div className=\"content-header\">Service Providers</div>\r\n      <div className=\"content-sub\">Here are the list of paysure providers</div>\r\n      <div className=\"app-table-actions\">\r\n      <div className=\"app-table-search\">\r\n        <input onChange={searchArray} type=\"text\" className=\"app-input-search w-input\" placeholder=\"Search...\" id=\"name\" />\r\n          </div>\r\n        <div className=\"app-table-buttons\">\r\n          <a href=\"#\" onClick={toggleAddProvider} className=\"table-button filter\">Add Providers<span className=\"table-button-icon\"></span></a>\r\n        </div>\r\n      </div>\r\n      {\r\n                        providers.length <= 0 ? <EmptyData/> :\r\n      <table className=\"app-table2\">\r\n                                  <thead>\r\n                                      <tr className=\"app-table2-row\">\r\n                                      <th className=\"app-table2-header\">Provider Code</th>\r\n                                      <th className=\"app-table2-header\">Provider Name</th>\r\n                                      <th className=\"app-table2-header\">Wallet ID</th>\r\n                                      <th className=\"app-table2-header\">Balance</th>\r\n                                      <th className=\"app-table2-header\">Total Funded</th>\r\n                                      <th className=\"app-table2-header\">Created Date</th>\r\n                                      <th className=\"app-table2-header\"></th>\r\n\r\n                                  </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n                                    {\r\n                                      providers.map( result => {\r\n                                        return (\r\n                                           <tr key = {result.id} className=\"app-table2-row\">\r\n                                  <td className=\"app-table2-data\">{result.providerCode}</td>\r\n                                      <td className=\"app-table2-data\">{result.providerName}</td>\r\n                                      <td className=\"app-table2-data\">{result.walletId}</td>\r\n                                      <td className=\"app-table2-data\"> \r\n                                      <NumberFormat value={result.balance} displayType={'text'} thousandSeparator={true} prefix={'₦'} renderText={(value, props) => <div {...props}>{value}</div>} /></td>\r\n                                      <td className=\"app-table2-data\">\r\n                                      <NumberFormat value={result.totalFunded} displayType={'text'} thousandSeparator={true} prefix={'₦'} renderText={(value, props) => <div {...props}>{value}</div>} /></td>\r\n                                      <td className=\"app-table2-data\">{result.createdAt}</td>\r\n                                    <Link to={\"/service-provider/\" + result.providerCode} style={{ textDecoration: 'none'}}>\r\n                                    <td className=\"app-table2-data\" style={{color: '#131573', fontWeight: 'bold', cursor: 'pointer'}}>\r\n                                       <div>Manage Provider</div>\r\n                                      </td>\r\n                                    </Link>\r\n                                      </tr>\r\n                                        )\r\n                                      })\r\n                                    }\r\n                                                                   \r\n                                  </tbody>\r\n                                  </table>\r\n}\r\n    </div>\r\n      <div className=\"app-admin-col-3\">\r\n              <Rightbar />\r\n            </div>\r\n</div>\r\n    )\r\n\r\n}\r\n\r\nexport default ServiceProviders ;","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\user-management\\user.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\api-management\\api.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\service-providers\\provider\\provider.js",["295","296","297","298","299","300","301","302","303"],"\r\nimport React, { useState, useEffect } from 'react'\r\nimport Leftbar from '../../../components/leftbar/leftbar'\r\nimport Rightbar from '../../../components/rightbar/rightbar'\r\nimport { Link, useParams } from 'react-router-dom'\r\nimport Overview from './overview'\r\nimport Transactions from './transactions'\r\nimport Charges from './charges'\r\nimport Settlements from './settlements'\r\nimport { getServiceProvider, getCharges,getServices,getTransactionsProvider,getWalletBalance } from '../../../globalApi'\r\n\r\nexport default function Provider() {\r\n        \r\n    const [ overview, setOverview] = useState(false);\r\n    const [ settlement, setSettlement] = useState(false);\r\n    const [ transactions, setTransactions] = useState(false);\r\n    const [ charges, setChargesView] = useState(false);\r\n    const [provider, setProvider] = useState({})\r\n    const [chargesData, setChargesData] = useState([])\r\n    const [transData, setTransData] = useState([])\r\n    const [services, setServices] = useState([]);\r\n    const[wallet, setWallet] = useState({})\r\n    const [newpage, setNewPage] = useState(0)\r\n    const [newrecord, setNewRecord] = useState(10)\r\n    let defaultPage = localStorage.getItem('tcP')\r\n    let defaultRecords = localStorage.getItem('tR')\r\n    let {id} = useParams();\r\n\r\n    useEffect( async () => {\r\n     console.log(id)\r\n     getServices().then(result => setServices(result));\r\n     await getServiceProvider(id).then(result => {\r\n     setProvider(result); \r\n     getCharges(result.id).then(result => {setChargesData(result)} )} )\r\n\r\n     getTransactionsProvider().then(result => { setTransData(result)});\r\n\r\n        getWalletBalance(id).then(result => setWallet(result));  \r\n      },[])\r\n\r\n\r\n    const changeOverview = () => {\r\n      setOverview(true)\r\n      setSettlement(false)\r\n      setTransactions(false)\r\n      setChargesView(false);  \r\n    }\r\n\r\n    const changeSettlement = () => {\r\n      setOverview(false)\r\n      setSettlement(true)\r\n      setTransactions(false)\r\n      setChargesView(false);\r\n    \r\n    }\r\n\r\n    const changeTransactions = () => {\r\n      setOverview(false)\r\n      setSettlement(false)\r\n      setTransactions(true)\r\n      setChargesView(false);\r\n    \r\n    }\r\n\r\n    const changeCharges = () => {\r\n      setOverview(false)\r\n      setSettlement(false)\r\n      setTransactions(false)\r\n      setChargesView(true);\r\n    \r\n    }\r\n\r\n\r\n        return(\r\n            <div className=\"app-admin-section\">\r\n            <div className=\"app-admin-col-1\">\r\n            <Leftbar/>\r\n            </div>\r\n            <div className=\"app-admin-col-2\">\r\n            <div className=\"admin-top-bar\">\r\n        <div className=\"admin-top-bar-left\">\r\n         <Link style={{ textDecoration: 'none'}} to=\"/service-providers\"><div className=\"settings-icon\"></div></Link> \r\n          <div onClick = { changeOverview } className={overview ? 'admin-top-barlinks admin-active-top-link' : 'admin-top-barlinks'}>Overview</div>\r\n          {/* <div onClick = { changeTransactions } className={transactions ? 'admin-top-barlinks admin-active-top-link' : 'admin-top-barlinks'}>Transactions</div> */}\r\n          <div onClick = { changeSettlement } className={settlement ? 'admin-top-barlinks admin-active-top-link' : 'admin-top-barlinks'}>Settlements</div>\r\n          <div onClick = { changeCharges } className={charges ? 'admin-top-barlinks admin-active-top-link' : 'admin-top-barlinks'}>Charges</div>\r\n        </div>\r\n        <div className=\"admin-top-bar-right\">\r\n          <div className=\"admin-topbar-date\">October 8th, 2020</div>\r\n        </div>\r\n      </div>\r\n\r\n      { overview ? <Overview wallet={wallet} provider= {provider} services={services}/> \r\n      : settlement ? <Settlements provider= {provider}/>\r\n      : transactions ? <Transactions transData={transData} provider= {provider}/>\r\n      : charges ? <Charges chargesData={chargesData} provider= {provider}/>\r\n      : <Overview wallet={wallet} provider= {provider} services={services}/> }\r\n\r\n\r\n    </div>\r\n      <div className=\"app-admin-col-3\">\r\n              <Rightbar />\r\n            </div>\r\n</div>\r\n    )\r\n}\r\n","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\service-providers\\provider\\overview.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\service-providers\\provider\\transactions.js",["304","305","306","307"],"\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Redirect} from 'react-router-dom'\r\nimport { getTransactionsProvider } from '../../../globalApi'\r\nimport Loader from '../../../components/ui/loader/loader'\r\nimport ViewTrans from './viewTrans'\r\nimport ExportReport from '../../Export'\r\nimport NumberFormat from 'react-number-format';\r\nexport default function Transactions(props) {\r\n    \r\n  const [transactions, setTransactions] = useState([]);\r\n  const [transDetails, setTransDetails] = useState({});\r\n  const [loader, setLoader] = useState(false);\r\n const [trans, setTrans] = useState({})\r\n const [viewTrans, setViewTrans] = useState(false)\r\n const [exportreport, setExport] = useState(false)\r\n const [newpage, setNewPage] = useState(0)\r\n const [newrecord, setNewRecord] = useState(10)\r\n \r\n let defaultPage = localStorage.getItem('prov-tcP')\r\n let defaultRecords = localStorage.getItem('prov-tR')\r\n \r\n  useEffect(() => { \r\n    setNewPage(defaultPage)\r\n    setNewRecord(defaultRecords)\r\n    getTransactionsProvider(1,10,props.provider.providerName).then(async(result) => {\r\n      //  setTransDetails(result); \r\n      setTransactions(result)});\r\n  }, [])\r\n\r\n  const getTrans = async(result) => {\r\n  await setTrans(result)\r\n   console.log('trans',trans)\r\n   viewTrans ? setViewTrans(false) :  setViewTrans(true)\r\n  }\r\n  \r\n  const toggleTrans = () => {\r\n    viewTrans ? setViewTrans(false) :  setViewTrans(true)\r\n  }\r\n\r\n  const toggleExport = () => {\r\n    exportreport ? setExport(false) :  setExport(true)\r\n  }\r\n\r\n  const prevPage = () => {\r\n    let currentPage = localStorage.getItem('tcP');\r\n    let defaultRecords = localStorage.getItem('tR')\r\n      let page = parseInt(currentPage) - 1\r\n      if(transDetails.lastPage <= page){\r\n        setLoader(true)\r\n      getTransactionsProvider(page,defaultRecords).then(async(result) => { \r\n        // setTransDetails(result); \r\n        const res = await result.sort(function(a, b) {\r\n         var c = new Date(a.transactionDate);\r\n         var d = new Date(b.transactionDate);\r\n         console.log('date', new Date(b.transactionDate) + '' + new Date(a.transactionDate))\r\n         return d-c;\r\n     });\r\n       setTransactions(res);\r\n\r\n        setLoader(false)});\r\n      }\r\n      else{\r\n        return false\r\n      }\r\n  }\r\n  \r\n  const nextPage = () => {\r\n  let currentPage = localStorage.getItem('tcP');\r\n  let defaultRecords = localStorage.getItem('tR')\r\n    let page = parseInt(currentPage) + 1\r\n    if(transDetails.lastPage >= page){\r\n      setLoader(true)\r\n       getTransactionsProvider(page,defaultRecords).then(async(result) => {\r\n        // setTransDetails(result); \r\n        const res = await result.sort(function(a, b) {\r\n         var c = new Date(a.transactionDate);\r\n         var d = new Date(b.transactionDate);\r\n         console.log('date', new Date(b.transactionDate) + '' + new Date(a.transactionDate))\r\n         return d-c;\r\n     });\r\n       setTransactions(res);\r\n          \r\n          setLoader(false)});\r\n    }\r\n    else{\r\n      return false\r\n    }\r\n  }\r\n\r\n  const goToPage = (e) =>{\r\n    if (e.key === 'Enter') {\r\n    let defaultRecords = localStorage.getItem('tR')\r\n      if(transDetails.lastPage >= newpage){\r\n        setLoader(true)\r\n         getTransactionsProvider(newpage,defaultRecords).then(async(result) => {\r\n          // setTransDetails(result); \r\n          const res = await result.sort(function(a, b) {\r\n           var c = new Date(a.transactionDate);\r\n           var d = new Date(b.transactionDate);\r\n           console.log('date', new Date(b.transactionDate) + '' + new Date(a.transactionDate))\r\n           return d-c;\r\n       });\r\n         setTransactions(res)\r\n          setLoader(false)});\r\n      }\r\n      else{\r\n        return false\r\n      }\r\n    }\r\n    else{\r\n      return false\r\n    }\r\n  }\r\n\r\n  const modifyRecords = (e) =>{\r\n    if (e.key === 'Enter') {\r\n    if(transDetails.lastPage >= newpage){\r\n      setLoader(true)\r\n    getTransactionsProvider(newpage,newrecord).then(async(result) => {\r\n      \r\n      // setTransDetails(result); \r\n      const res = await result.sort(function(a, b) {\r\n       var c = new Date(a.transactionDate);\r\n       var d = new Date(b.transactionDate);\r\n       console.log('date', new Date(b.transactionDate) + '' + new Date(a.transactionDate))\r\n       return d-c;\r\n   });\r\n     setTransactions(res)\r\n      setLoader(false)});\r\n    }\r\n    else{\r\n      return false\r\n    }\r\n  }\r\n  else{\r\n    return false\r\n  }\r\n  }\r\n\r\n    if (!localStorage.getItem(\"token\")) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n\r\n        return(\r\n          <>\r\n            { viewTrans ? <ViewTrans trans={trans} closeModal={toggleTrans}/> : null }\r\n            {exportreport ? <ExportReport transactions={transactions} closeModal={toggleExport}/> : null}\r\n            { loader ? <Loader/> : null }\r\n      <div className=\"content-header\">Transactions</div>\r\n      <div className=\"content-sub\">Here are the latest report on this Provider</div>\r\n      <div className=\"app-table-actions\">\r\n        <div className=\"app-table-search\">\r\n        <input type=\"text\" className=\"app-input-search w-input\"  placeholder=\"Search...\" id=\"name\" />\r\n          </div>\r\n        <div className=\"app-table-buttons\">\r\n\r\n          {/* <a href=\"#\" className=\"table-button sort\">Sort <span className=\"table-button-icon\"></span></a>\r\n          <a href=\"#\" className=\"table-button filter\">Filter <span className=\"table-button-icon\"></span></a>\r\n          <a href=\"#\" className=\"table-button actions\">Actions <span className=\"table-button-icon\"></span></a> */}\r\n          {/* <div className=\"styled\">\r\n        <select>\r\n                <option>Sort</option>\r\n                <option>Apples</option>\r\n                <option>Chocklate</option>\r\n                <option>Pancakes</option>\r\n            </select>\r\n        </div>\r\n\r\n        <div className=\"styled\">\r\n        <select>\r\n                <option>Filter</option>\r\n                <option>Apples</option>\r\n                <option>Chocklate</option>\r\n                <option>Pancakes</option>\r\n            </select>\r\n        </div>\r\n\r\n\r\n        <div className=\"styled\">\r\n        <select>\r\n                <option>Actions</option>\r\n                <option>Apples</option>\r\n                <option>Chocklate</option>\r\n                <option>Pancakes</option>\r\n            </select>\r\n        </div> */}\r\n         <div onClick={toggleExport} style={{cursor:'pointer'}} className=\"table-button filter\">Export Report<span className=\"table-button-icon\"></span></div>\r\n\r\n        </div>\r\n      </div>\r\n      <div>\r\n      <table className=\"app-table2\">\r\n                                  <thead>\r\n                                      <tr className=\"app-table2-row\">\r\n                                      <th className=\"app-table2-header\">Trans.Type</th>\r\n                                      <th className=\"app-table2-header\">Channel</th>\r\n                                      <th className=\"app-table2-header\">Amount</th>\r\n                                    <th className=\"app-table2-header\">Mer.Comsn</th>\r\n                                    <th className=\"app-table2-header\">Paysure.Comsn</th>\r\n                                    <th className=\"app-table2-header\">Trans-Status</th>\r\n                                    <th className=\"app-table2-header\">Trans.Date</th>\r\n                                    <th className=\"app-table2-header\"></th>\r\n                                  </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n                                  {\r\n                                      transactions.map( result => {\r\n                                        return(\r\n                                     <tr key={result.id} className=\"app-table2-row\">\r\n                                        <td className=\"app-table2-data\">{result.transactionType}</td>\r\n                                        <td className=\"app-table2-data\">{result.channel}</td>\r\n                                        <td className=\"app-table2-data\">\r\n                                        <NumberFormat value={result.amount} displayType={'text'} thousandSeparator={true} prefix={'₦'} renderText={(value, props) => <div {...props}>{value}</div>} />\r\n                                          </td>\r\n                                        <td className=\"app-table2-data\">\r\n                                        <NumberFormat value={result.merchantCommission} displayType={'text'} thousandSeparator={true} prefix={'₦'} renderText={(value, props) => <div {...props}>{value}</div>} />\r\n                                          </td>\r\n                                        <td className=\"app-table2-data\">\r\n                                        <NumberFormat value={result.paysureCoreCommission} displayType={'text'} thousandSeparator={true} prefix={'₦'} renderText={(value, props) => <div {...props}>{value}</div>} /></td>\r\n                                        { result.transactionStatus == 0 ? \r\n                                          <td className=\"app-table2-data table-active\">Successful</td> \r\n                                        : \r\n                                        <td className=\"app-table2-data table-inactive\">Failed</td>\r\n                                        }\r\n                                        <td className=\"app-table2-data\">{result.transactionDate}</td>\r\n                                        <td className=\"app-table2-data\" style={{ color: '#131573', fontWeight: 'bold', cursor: 'pointer' }}>\r\n                                        <div onClick={ () => { getTrans(result)}}>View Details <span className=\"app-icon\"></span></div>\r\n                                        </td>\r\n                                  </tr>\r\n                                        )\r\n                                      })\r\n                                    }                                \r\n                                  </tbody>                  \r\n                                  </table>\r\n      </div>\r\n     {\r\n       transDetails.totalRecords > newrecord ?\r\n             <div className=\"pagination\">\r\n       <div className=\"pag-col-1\">\r\n         <div className=\"pag-s\"><input onKeyDown={modifyRecords} value={newrecord}  onChange = { (event) => setNewRecord(event.target.value) } className=\"pag-input\" type=\"number\" name=\"page\" max=\"13\" /></div>\r\n         <div className=\"pag-s\"><span style={{marginRight:'10px'}} className=\"pag-s-text\">Records per page</span></div>\r\n       </div>\r\n       <div className=\"pag-col-2\">\r\n        <div className=\"pag-prev\" onClick={ prevPage }>Previous Page</div>\r\n        <div className=\"pag-next\" onClick={ nextPage }>Next Page</div>\r\n       </div>\r\n       <div className=\"pag-col-3\">\r\n         <div className=\"pag-s\"><span className=\"pag-s-text\">Page</span></div>\r\n         <div className=\"pag-s\"><input onKeyDown={goToPage} value={newpage}  onChange = { (event) => setNewPage(event.target.value) } className=\"pag-input\" type=\"number\" name=\"page\" max=\"13\" /></div>\r\n         <div className=\"pag-s\"><span style={{marginRight:'10px'}} className=\"pag-s-text\">of</span><span className=\"pag-s-text\">{transDetails.lastPage}</span></div>\r\n       </div>\r\n      </div> : ''\r\n     }\r\n\r\n\r\n    </>\r\n    )\r\n}\r\n","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\service-providers\\provider\\settlements.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\api-management\\request.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\api-management\\services.js",["308"],"\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Services() {\r\n\r\n        return(\r\n        <>\r\n            <div class=\"content-header\">Incoming Socket API</div>\r\n      <div class=\"content-sub\">Here are the list onf incoming socket API</div>\r\n      <div class=\"app-table-actions\">\r\n      <div class=\"app-table-search\">\r\n        <input type=\"text\" class=\"app-input-search w-input\" maxlength=\"256\" name=\"name\" data-name=\"Name\" placeholder=\"Search...\" id=\"name\" />\r\n          </div>\r\n        <div class=\"app-table-buttons\">\r\n          <a href=\"#\" class=\"table-button filter\">Add API<span class=\"table-button-icon\"></span></a>\r\n        </div>\r\n      </div>\r\n\r\n      <table className=\"app-table2\">\r\n                                  <thead>\r\n                                      <tr className=\"app-table2-row\">\r\n                                      <th className=\"app-table2-header\">API</th>\r\n                                      <th className=\"app-table2-header\">Category</th>\r\n                                      <th className=\"app-table2-header\">Usage</th>\r\n                                      <th className=\"app-table2-header\"></th>\r\n                                      <th className=\"app-table2-header\"></th>\r\n                                  </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n                                      <tr className=\"app-table2-row\">\r\n                                  <td className=\"app-table2-data\">Transfer</td>\r\n                                      <td className=\"app-table2-data\">Transfer</td>\r\n                                      <td className=\"app-table2-data\" style={{color: '#7fe233'}}>10</td>\r\n                                      <td className=\"app-table2-data\"><span className=\"app-icon\" style={{ color: '#F95050', fontSize: '20px'}}></span></td>\r\n                                      <td className=\"app-table2-data\" style={{color: '#131573', fontWeight: 'bold', cursor: 'pointer'}}><Link style={{ textDecoration: 'none'}} to=\"/api-service/\"><div>Manage API <span className=\"app-icon\"></span></div></Link></td>\r\n                                  </tr>\r\n                                 \r\n                                 \r\n                                  </tbody>\r\n                                  \r\n                                  \r\n                                  </table>\r\n</>\r\n    )\r\n}\r\n\r\nexport default Services;","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\api-management\\service.js",["309","310"],"\r\nimport React from 'react'\r\nimport Leftbar from '../../components/leftbar/leftbar'\r\nimport Rightbar from '../../components/rightbar/rightbar'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction ApiService() {\r\n\r\n        return(\r\n            <div className=\"app-admin-section\">\r\n            <div className=\"app-admin-col-1\">\r\n            <Leftbar/>\r\n            </div>\r\n            <div className=\"app-admin-col-2\">\r\n            <div className=\"admin-top-bar\">\r\n        <div className=\"admin-top-bar-left\">\r\n        <Link style={{ textDecoration: 'none'}} to=\"/api-management\"><div className=\"settings-icon\"></div></Link> \r\n        </div>\r\n        <div className=\"admin-top-bar-right\">\r\n          <div className=\"admin-topbar-date\">October 8th, 2020</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"app-table-actions\">\r\n        <div class=\"app-table-search\">\r\n          <div class=\"content-header\">Transfer API</div>\r\n          <div class=\"content-sub\">Lorem ipsum dolor sit amet, consectetur adipiscing elit, </div>\r\n        </div>\r\n        <div class=\"app-table-buttons\">\r\n          <a href=\"#\" class=\"table-button filter\">Reset API<span class=\"table-button-icon\"></span></a>\r\n          <a href=\"#\" class=\"table-button actions\">Save Changes<span class=\"table-button-icon\"></span></a>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"basic-table-card\">\r\n        <div class=\"content-header-2\">Details</div>\r\n        <div class=\"content-sub\">Lorem ipsum dolor sit amet, consectetur adipiscing elit, </div>\r\n        <div class=\"role-descrip-div\">\r\n          <div class=\"role-descrip-div-col-1\">\r\n            <div class=\"form-block-2 w-form\">\r\n              <form id=\"email-form\" name=\"email-form\" data-name=\"Email Form\">\r\n                  <input type=\"text\" class=\"app-text-field w-input\" maxlength=\"256\" name=\"name\" data-name=\"Name\" placeholder=\"Provider\" id=\"name\"/></form>\r\n            </div>\r\n          </div>\r\n          <div class=\"role-descrip-div-col-2\">\r\n            <div class=\"form-block-2 w-form\">\r\n              <form id=\"email-form\" name=\"email-form\" data-name=\"Email Form\">\r\n                  <input type=\"text\" class=\"app-text-field w-input\" maxlength=\"256\" name=\"name-2\" data-name=\"Name 2\" placeholder=\"Commision\" id=\"name-2\"/></form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"basic-table-card\">\r\n                <div className=\"table-header\">\r\n                  <div className=\"content-header-2\">API Usage</div>\r\n                </div>\r\n                \r\n                <table className=\"app-table\">\r\n\t\t\t\t\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr className=\"app-table-row\">\r\n\t\t\t\t\t\t\t\t\t\t\t<th className=\"app-table-header\">Paysure Product</th>\r\n\t\t\t\t\t\t\t\t\t\t\t<th className=\"app-table-header\">Details</th>\r\n\t\t\t\t\t\t\t\t\t\t\t<th className=\"app-table-header\">Transactions</th>\r\n\t\t\t\t\t\t\t\t\t\t\t<th className=\"app-table-header\">Error Logs</th>\r\n\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t</thead>\r\n\r\n\t\t\t\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t\t\t\t\t<tr className=\"app-table-row\">\r\n\t\t\t\t\t\t\t\t\t\t\t<td className=\"app-table-data\">Agency</td>\r\n\t\t\t\t\t\t\t\t\t\t\t<td className=\"app-table-data\">Lorem Ipsum eruex polo</td>\r\n\t\t\t\t\t\t\t\t\t\t\t<td className=\"app-table-data\">1000</td>\r\n                                            <td className=\"app-table-data\">200</td>\r\n\t\t\t\t\t\t\t\t\t\t</tr>\r\n\r\n\t\t\t\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t</table>\r\n              </div>\r\n     </div>\r\n      <div className=\"app-admin-col-3\">\r\n              <Rightbar />\r\n            </div>\r\n</div>\r\n    )\r\n\r\n}\r\n\r\nexport default ApiService ;","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\user-management\\users.js",["311"],"import React, { useState}  from 'react'\r\nimport AddUser from './addUser'\r\nimport EmptyData from '../../components/ui/emptyData/emptyData'\r\nexport default function Users({admin, updateUserList, searchArray}) {\r\n  const [ addUser, setaddUser] = useState(false)\r\n\r\n  \r\n    const toggleaddUser = () => {\r\n      addUser ? setaddUser(false) :  setaddUser(true)\r\n    }\r\n  \r\n    \r\n      return (\r\n      <>\r\n       { addUser ? <AddUser updateUserList = {updateUserList} closeModal = {toggleaddUser} /> : null  }\r\n\r\n          <div className=\"content-header\">Users</div>\r\n      <div className=\"content-sub\">Here are the list of users</div>\r\n      <div className=\"app-table-actions\">\r\n        <div className=\"app-table-search\">\r\n        <input onChange={searchArray} type=\"text\" className=\"app-input-search w-input\"  placeholder=\"Search...\" id=\"name\" />\r\n          </div>\r\n          <div className=\"app-table-buttons\">\r\n             <div style={{cursor:'pointer'}} onClick={toggleaddUser}  className=\"table-button filter\">Add New User<span className=\"table-button-icon\"></span></div>\r\n          </div>\r\n      </div>\r\n      <div>\r\n      {\r\n                        admin.length <= 0 ? <EmptyData/> :\r\n      <table className=\"app-table2\">\r\n                                  <thead>\r\n                                      <tr className=\"app-table2-row\">\r\n                                     <th className=\"app-table2-header\"><input type = \"checkbox\" /></th>\r\n                                     <th className=\"app-table2-header\">Username</th>\r\n                                    <th className=\"app-table2-header\">Email Address</th>\r\n                                    <th className=\"app-table2-header\">Phone Number</th>\r\n                                    <th className=\"app-table2-header\">Roles</th>\r\n                                    <th className=\"app-table2-header\">Last seen</th>\r\n                                    <th className=\"app-table2-header\">Status</th>\r\n                                  </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n\r\n                                    {\r\n                                      admin.map( result => {\r\n                                        return(\r\n                                     <tr key={result.id} className=\"app-table2-row\">\r\n                                          <td className=\"app-table2-data\"><input type = \"checkbox\" /></td>\r\n                                          <td style={{textTransform: 'capitalize'}} className=\"app-table2-data\">{result.username}</td>\r\n                                        <td className=\"app-table2-data\">{result.emailAddress}</td>\r\n                                        <td className=\"app-table2-data\">{result.phoneNumber}</td>\r\n                                        <td className=\"app-table2-data\">{result.roleName}</td>\r\n                                        <td className=\"app-table2-data\">{result.lastLoginDate}</td>\r\n                                        { result.active == 1 ? \r\n                                          <td className=\"app-table2-data table-active\">Active</td> \r\n                                        : \r\n                                        <td className=\"app-table2-data table-inactive\">Inactive</td>\r\n                                        }\r\n                                  </tr>\r\n                                        )\r\n                                      })\r\n                                    }\r\n                                    \r\n                                  </tbody>\r\n                                  \r\n                                  \r\n                                  </table>\r\n}\r\n      </div>\r\n    </>\r\n    )\r\n}","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\user-management\\Roles\\roles.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\user-management\\Roles\\createRoles.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\user-management\\Roles\\editRoles.js",["312"],"import React, { useState, useEffect } from 'react'\r\nimport Leftbar from '../../../components/leftbar/leftbar'\r\nimport Rightbar from '../../../components/rightbar/rightbar'\r\nimport { Link } from 'react-router-dom'\r\nimport { Redirect, useParams} from 'react-router-dom'\r\nimport { getRole, getPermission, getPermissions } from '../../../globalApi'\r\nimport axios from 'axios'\r\nimport url from '../../../baseUrl.json'\r\nimport Caution from '../../../components/ui/caution/caution'\r\nimport AddPermission from './addPermission'\r\nimport Loader from '../../../components/ui/loader/loader'\r\nimport State from '../../../components/ui/state/state'\r\nexport default function User() {\r\n        \r\n    const [role, setRole] = useState({});\r\n    const [permissions, setPermissions] = useState([]);\r\n    const [permission, setPermission] = useState([]);\r\n    const [ addPermission, setAddPermission] = useState(false)\r\n    const [caution, setCaution] = useState(false)\r\n    const [currentPerm, setCurrentPerm] = useState(null)\r\n    const [currentIndex, setCurrentIndex] = useState(null)\r\n    const [loader, setLoader] = useState(false)\r\n    const [formState, setFormState] = useState(false)\r\n    const [formStateType, setFormStateType] = useState('success')\r\n   let { id } = useParams();\r\n\r\n    useEffect( () => {\r\n      getRole(id).then(result => setRole(result))\r\n      getPermission(id).then(result => setPermission(result))\r\n      getPermissions().then(result => setPermissions(result))\r\n    }, [])\r\n\r\n    if (!localStorage.getItem(\"token\")) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    const toggleCaution = (result, index) => {\r\n      setCurrentPerm(result)\r\n      setCurrentIndex(index)\r\n      caution ? setCaution(false) :  setCaution(true)\r\n    }\r\n\r\n    const removePermission = async() => {\r\n      setCaution(false)\r\n      setLoader(true)\r\n      const local_token = localStorage.getItem('token');\r\n      try {\r\n          const result = await axios.delete(url.url + '/roles/removepermissions',\r\n          {\r\n            \"roles\": [id],\r\n            \"permissions\": [currentPerm]\r\n        }, {\r\n            headers: {\r\n              \"Access-Control-Allow-Origin\" : \"*\",\r\n              \"Access-Control-Allow-Methods\": \"GET, OPTIONS, HEAD, PUT, POST\",\r\n              'Authorization': `Bearer ${local_token}`,\r\n              \"Access-Control-Allow-Headers\": \"content-type, accept, authorization, cache-control, x-requested-with\"\r\n            }\r\n          })\r\n        if(result.data.responseCode === 0) {\r\n          setLoader(false);\r\n          setFormState(true);\r\n          setFormStateType('success')\r\n          permission.splice(currentIndex, 1);\r\n          setPermission(permission) \r\n        }\r\n        else {\r\n          setLoader(false);\r\n          setFormState(true);\r\n          setFormStateType('failed')\r\n        }\r\n       }\r\n       catch(e){console.log(e)}\r\n    }\r\n\r\n    const updatePermissionList = (newPerm) => {\r\n      setPermission([...permission, ...newPerm])\r\n      }\r\n    \r\n      const toggleAddPermission = () => {\r\n        addPermission ? setAddPermission(false) :  setAddPermission(true)\r\n      }\r\n      const resetState = () => {\r\n        setFormState(false)\r\n      }\r\n        return(\r\n          <div>\r\n            { formState ? <State closeModal={resetState} state = {formStateType} /> : null }\r\n             { loader ? <Loader/> : null }\r\n            {\r\n              caution ? <Caution cancel = {toggleCaution}  confirm = { removePermission }/> : null\r\n            }\r\n        {\r\n           addPermission ? <AddPermission permissions = {permissions} updatePermissionList = {updatePermissionList} closeModal = {toggleAddPermission}/> : null\r\n              }\r\n            <div className=\"app-admin-section\">\r\n            <div className=\"app-admin-col-1\">\r\n            <Leftbar/>\r\n            </div>\r\n            <div className=\"app-admin-col-2\">\r\n            <div className=\"admin-top-bar\">\r\n        <div className=\"admin-top-bar-left\">\r\n         <Link style={{ textDecoration: 'none'}} to=\"/user-management\"><div className=\"settings-icon\"></div></Link> \r\n        </div>\r\n        <div className=\"admin-top-bar-right\">\r\n          <div className=\"admin-topbar-date\">October 8th, 2020</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"app-table-actions\">\r\n        <div className=\"app-table-search\">\r\n          <div className=\"content-header\">Manage Role</div>\r\n          <div className=\"content-sub\">Lorem ipsum dolor sit amet, consectetur adipiscing elit, </div>\r\n        </div>\r\n        {/* <div className=\"app-table-buttons\">\r\n          <a href=\"/\" className=\"table-button filter\">Reset API<span className=\"table-button-icon\"></span></a>\r\n          <a href=\"#\"className=\"table-button actions\">Save Changes<span className=\"table-button-icon\"></span></a>\r\n        </div> */}\r\n      </div>\r\n\r\n      <div className=\"basic-table-card\">\r\n        <div className=\"content-header-2\">Details</div>\r\n        <div className=\"content-sub\">Lorem ipsum dolor sit amet, consectetur adipiscing elit, </div>\r\n        <div className=\"role-descrip-div\">\r\n          <div className=\"role-descrip-div-col-1\">\r\n            <div className=\"form-block-2 w-form\">\r\n              <form id=\"email-form\" name=\"email-form\" data-name=\"Email Form\">\r\n                  <input value={role.roleName} type=\"text\" className=\"app-text-field w-input\" placeholder=\"Provider\" id=\"name\"/></form>\r\n            </div>\r\n          </div>\r\n          <div className=\"role-descrip-div-col-2\">\r\n            <div className=\"form-block-2 w-form\">\r\n              <form id=\"email-form\" name=\"email-form\" data-name=\"Email Form\">\r\n                  <input value={role.roleDescription} type=\"text\" className=\"app-text-field w-input\"  placeholder=\"Commision\" id=\"name-2\"/></form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"basic-table-card\">\r\n      <div className=\"table-header\">\r\n                  <div className=\"content-header-2\">Permission</div>\r\n                  <div onClick={toggleAddPermission} className=\"table-view-all\">Add Permission</div>\r\n                </div>\r\n                {\r\n                  permission.map((result, index) => {\r\n                    return(\r\n                      <div key={index} style={{marginRight:'20px',marginBottom:'20px', background: '#ededed', padding:'10px', borderRadius:'5px', display:'inline-block', color: '#696969', fontSize: '13px'}}>\r\n                 {result} <span onClick={ ()=> { toggleCaution(result, index)}  } style={{ cursor: 'pointer', fontWeight: 'bold', color:'red', marginLeft:'10px'}}>X</span>\r\n               </div>\r\n                    )\r\n                  })\r\n                }\r\n               \r\n              </div>\r\n\r\n    </div>\r\n      <div className=\"app-admin-col-3\">\r\n              <Rightbar />\r\n            </div>\r\n</div>\r\n</div>\r\n    )\r\n}\r\n","C:\\Users\\Admin\\Documents\\paysure-core\\src\\components\\ui\\errorAlert\\errorAlert.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\globalApi.js",["313","314"],"import axiosInstance from \"./helpers/axios\";\r\nimport axios from \"axios\";\r\nimport url from './baseUrl.json'\r\n\r\nexport function Logout(){\r\n  localStorage.removeItem('token')\r\n  localStorage.removeItem('user')\r\n}\r\n\r\nexport function currentUser()  {\r\n    const local_user = localStorage.getItem('user');\r\n    return JSON.parse(local_user);\r\n}\r\n\r\n\r\nexport async function getWalletBalance(walletId) {\r\n  const local_token = localStorage.getItem('token');\r\n  try {\r\n      const result = await axiosInstance().get(process.env.REACT_APP_BACKEND_URL + '/transactions/merchant/balance/' + walletId, {\r\n        headers: {\r\n          'Authorization': `Bearer ${local_token}` \r\n        }\r\n      })\r\n    if(result.data.responseCode === 0) {\r\n      return result.data.data\r\n    }\r\n    else {\r\n      console.log(\"Error\",result.data.responseMessage)\r\n      const empty = {}\r\n      return empty\r\n    }\r\n   }\r\n   catch(e){\r\n     console.log(e); \r\n     const empty = {}\r\n    return empty}\r\n    \r\n}\r\n\r\nexport async function getPaysureBalance(history) {\r\n  const local_token = localStorage.getItem('token');\r\n  try {\r\n      const result = await axiosInstance(history).get(process.env.REACT_APP_BACKEND_URL + '/transactions/gateway/balance', {\r\n        headers: {\r\n          'Authorization': `Bearer ${local_token}` \r\n        }\r\n      })\r\n    if(result.data.responseCode === 0) {\r\n      return result.data.data\r\n    }\r\n    else {\r\n      console.log(\"Error\",result.data.responseMessage)\r\n      const empty = {}\r\n      return empty\r\n    }\r\n   }\r\n   catch(e){\r\n     console.log(e); \r\n     const empty = {}\r\n    return empty}\r\n    \r\n}\r\n\r\n\r\nexport async function getOrganisations(history) {\r\n    const local_token = localStorage.getItem('token');\r\n    try {\r\n        const result = await axiosInstance(history).get(process.env.REACT_APP_BACKEND_URL + '/organisations/parent/' + url.org_code, {\r\n          headers: {\r\n            'Authorization': `Bearer ${local_token}` \r\n          }\r\n        })\r\n      if(result.data.responseCode === 0) {\r\n        return result.data.data\r\n      }\r\n      else {\r\n        console.log(\"Error\",result.data.responseMessage)\r\n        const empty = []\r\n        return empty\r\n      }\r\n     }\r\n     catch(e){\r\n       console.log(e); \r\n       const empty = []\r\n      return empty}\r\n      \r\n}\r\n\r\nexport async function getOrganisation(orgCode) {\r\n    const local_token = localStorage.getItem('token');\r\n    try {\r\n        const result = await axiosInstance().get(process.env.REACT_APP_BACKEND_URL + '/organisations/' + orgCode, {\r\n          headers: {\r\n            'Authorization': `Bearer ${local_token}` \r\n          }\r\n        })\r\n      if(result.data.responseCode === 0) {\r\n        return result.data.data\r\n      }\r\n      else {\r\n        console.log(\"Error\",result.data.responseMessage)\r\n        const empty = {}\r\n        return empty\r\n      }\r\n     }\r\n     catch(e){\r\n       console.log(e); \r\n       const empty = {}\r\n      return empty}\r\n      \r\n}\r\n\r\nexport async function getServiceProviders(history) {\r\n    const local_token = localStorage.getItem('token');\r\n  try {\r\n    const result = await axiosInstance(history).get(process.env.REACT_APP_BACKEND_URL + '/services/providers' , {\r\n      headers: {\r\n        'Authorization': `Bearer ${local_token}` \r\n      }\r\n    })\r\n  if(result.data.responseCode === 0) {\r\n    return result.data.data\r\n  }\r\n  else {\r\n    console.log(\"Error\",result.data.responseMessage)\r\n    const empty = []\r\n    return empty\r\n  }\r\n }\r\n catch(e){\r\n   console.log(e); \r\n   const empty = []\r\n  return empty}\r\n\r\n}\r\n\r\nexport async function getServiceProvider(provCode) {\r\n  const local_token = localStorage.getItem('token');\r\ntry {\r\n  const result = await axiosInstance().get(process.env.REACT_APP_BACKEND_URL + '/services/providers/' + provCode , {\r\n    headers: {\r\n      'Authorization': `Bearer ${local_token}` \r\n    }\r\n  })\r\nif(result.data.responseCode === 0) {\r\n  return result.data.data\r\n}\r\nelse {\r\n  console.log(\"Error\",result.data.responseMessage)\r\n  const empty = {}\r\n  return empty\r\n}\r\n}\r\ncatch(e){\r\n console.log(e); \r\n const empty = {}\r\nreturn empty}\r\n\r\n}\r\n\r\n\r\nexport async function getCharges(provId) {\r\n  const local_token = localStorage.getItem('token');\r\ntry {\r\n  const result = await axiosInstance().get(process.env.REACT_APP_BACKEND_URL + '/services/charges/' + provId , {\r\n    headers: {\r\n      'Authorization': `Bearer ${local_token}` \r\n    }\r\n  })\r\nif(result.data.responseCode === 0) {\r\n  return result.data.data\r\n}\r\nelse {\r\n  console.log(\"Error\",result.data.responseMessage)\r\n  const empty = []\r\n  return empty\r\n}\r\n}\r\ncatch(e){\r\n console.log(e); \r\n const empty = []\r\nreturn empty}\r\n\r\n}\r\n\r\nexport async function getServices(history) {\r\n    const local_token = localStorage.getItem('token');\r\n  try {\r\n    const result = await axiosInstance(history).get(process.env.REACT_APP_BACKEND_URL + '/services?orderBy=serviceName&pageNumber=1&recordsPerPage=10' , {\r\n      headers: {\r\n        'Authorization': `Bearer ${local_token}` \r\n      }\r\n    })\r\n  if(result.data.responseCode === 0) {\r\n    return result.data\r\n  }\r\n  else {\r\n    console.log(\"Error\",result.data.responseMessage)\r\n    const empty = []\r\n    return empty\r\n  }\r\n }\r\n catch(e){\r\n   console.log(e); \r\n   const empty = []\r\n  return empty}\r\n\r\n}\r\n\r\nexport async function getServicesAll(page,records) {\r\n  const local_token = localStorage.getItem('token');\r\ntry {\r\n  const result = await axiosInstance().get(process.env.REACT_APP_BACKEND_URL + `/services?orderBy=serviceName&pageNumber=${page}&recordsPerPage=${records}` , {\r\n    headers: {\r\n      'Authorization': `Bearer ${local_token}` \r\n    }\r\n  })\r\nif(result.data.responseCode === 0) {\r\n  localStorage.setItem('ser-tcP', page)\r\n  localStorage.setItem('ser-tR', records)\r\n  return result.data\r\n}\r\nelse {\r\n  console.log(\"Error\",result.data.responseMessage)\r\n  const empty = []\r\n  return empty\r\n}\r\n}\r\ncatch(e){\r\n console.log(e); \r\n const empty = []\r\nreturn empty}\r\n\r\n}\r\n\r\nexport async function getTransactions(history) {\r\n    const local_token = localStorage.getItem('token');\r\n  try {\r\n    const result = await axiosInstance(history).get(process.env.REACT_APP_BACKEND_URL + '/transactions?orderBy=serviceName&pageNumber=1&recordsPerPage=10' , {\r\n      headers: {\r\n        'Authorization': `Bearer ${local_token}` \r\n      }\r\n    })\r\n  if(result.data.responseCode === 0) {\r\n    return result.data.data\r\n  }\r\n  else {\r\n    console.log(\"Error\",result.data.responseMessage)\r\n    const empty = []\r\n    return empty\r\n  }\r\n }\r\n catch(e){\r\n   console.log(e); \r\n   const empty = []\r\n  return empty}\r\n\r\n}\r\n\r\nexport async function getTransactionsAll(page,records) {\r\n  const local_token = localStorage.getItem('token');\r\ntry {\r\n  const result = await axiosInstance().get(process.env.REACT_APP_BACKEND_URL + `/transactions?orderBy=serviceName&pageNumber=${page}&recordsPerPage=${records}` , {\r\n    headers: {\r\n      'Authorization': `Bearer ${local_token}` \r\n    }\r\n  })\r\nif(result.data.responseCode === 0) {\r\n  localStorage.setItem('tcP', page)\r\n  localStorage.setItem('tR', records)\r\n  return result.data\r\n}\r\nelse {\r\n  console.log(\"Error\",result.data.responseMessage)\r\n  const empty = []\r\n  return empty\r\n}\r\n}\r\ncatch(e){\r\n console.log(e); \r\n const empty = []\r\nreturn empty}\r\n\r\n}\r\n\r\nexport async function getTransactionsProvider(page,records,providerName) {\r\n  const local_token = localStorage.getItem('token');\r\ntry {\r\n  const result = await axiosInstance().get(process.env.REACT_APP_BACKEND_URL + `/transactions?orderBy=serviceName&pageNumber=1&recordsPerPage=10` , {\r\n    headers: {\r\n      'Authorization': `Bearer ${local_token}` \r\n    }\r\n  })\r\nif(result.data.responseCode === 0) {\r\n  localStorage.setItem('prov-tcP', page)\r\n  localStorage.setItem('prov-tR', records)\r\n\r\n  let provData = await result.data.data.filter(trans => { \r\n    return trans.providerName == providerName\r\n   });\r\n   console.log('provider', providerName)\r\n  return provData\r\n}\r\nelse {\r\n  console.log(\"Error\",result.data.responseMessage)\r\n  const empty = []\r\n  return empty\r\n}\r\n}\r\ncatch(e){\r\n console.log(e); \r\n const empty = []\r\nreturn empty}\r\n}\r\n\r\nexport async function getUsers(history) {\r\n        const local_token = localStorage.getItem('token');\r\n      try {\r\n        const result = await axiosInstance(history).get(process.env.REACT_APP_BACKEND_URL + '/organisations/users/' + url.org_code , {\r\n          headers: {\r\n            'Authorization': `Bearer ${local_token}` \r\n          }\r\n        })\r\n      if(result.data.responseCode === 0) {\r\n        return result.data.data\r\n      }\r\n      else {\r\n        console.log(\"Error\",result.data.responseMessage)\r\n        const empty = []\r\n        return empty\r\n      }\r\n     }\r\n     catch(e){\r\n       console.log(e); \r\n       const empty = []\r\n      return empty}\r\n\r\n}\r\n\r\nexport async function getUsers2(merCode) {\r\n  const local_token = localStorage.getItem('token');\r\ntry {\r\n  const result = await axiosInstance().get(process.env.REACT_APP_BACKEND_URL + '/merchants/users/' + merCode , {\r\n    headers: {\r\n      'Authorization': `Bearer ${local_token}` \r\n    }\r\n  })\r\nif(result.data.responseCode === 0) {\r\n  return result.data.data\r\n}\r\nelse {\r\n  console.log(\"Error\",result.data.responseMessage)\r\n  const empty = []\r\n  return empty\r\n}\r\n}\r\ncatch(e){\r\n console.log(e); \r\n const empty = []\r\nreturn empty}\r\n\r\n}\r\n\r\n\r\nexport async function getMerchantsB2B(orgCode) {\r\n  const local_token = localStorage.getItem('token');\r\n  try {\r\n      const result = await axiosInstance().get(process.env.REACT_APP_BACKEND_URL + '/organisations/merchants/' + orgCode + '/3', {\r\n        headers: {\r\n          'Authorization': `Bearer ${local_token}` \r\n        }\r\n      })\r\n    if(result.data.responseCode === 0) {\r\n      return result.data.data\r\n    }\r\n    else {\r\n      console.log(\"Error\",result.data.responseMessage)\r\n      const empty = []\r\n      return empty\r\n    }\r\n   }\r\n   catch(e){\r\n     console.log(e); \r\n     const empty = []\r\n    return empty}\r\n    \r\n}\r\n\r\nexport async function getMerchantsB2BCustom(orgCode) {\r\n  const local_token = localStorage.getItem('token');\r\n  try {\r\n      const result = await axiosInstance().get(process.env.REACT_APP_BACKEND_URL + '/organisations/merchants/' + orgCode + '/8', {\r\n        headers: {\r\n          'Authorization': `Bearer ${local_token}` \r\n        }\r\n      })\r\n    if(result.data.responseCode === 0) {\r\n      return result.data.data\r\n    }\r\n    else {\r\n      console.log(\"Error\",result.data.responseMessage)\r\n      const empty = []\r\n      return empty\r\n    }\r\n   }\r\n   catch(e){\r\n     console.log(e); \r\n     const empty = []\r\n    return empty}\r\n    \r\n}\r\n\r\n\r\nexport async function getMerchant(merchantCode) {\r\n  const local_token = localStorage.getItem('token');\r\n  try {\r\n      const result = await axiosInstance().get(process.env.REACT_APP_BACKEND_URL + '/merchants/single/' + merchantCode + '/details', {\r\n        headers: {\r\n          'Authorization': `Bearer ${local_token}` \r\n        }\r\n      })\r\n    if(result.data.responseCode === 0) {\r\n      return result.data.data\r\n    }\r\n    else {\r\n      console.log(\"Error\",result.data.responseMessage)\r\n      const empty = {}\r\n      return empty\r\n    }\r\n   }\r\n   catch(e){\r\n     console.log(e); \r\n     const empty = {}\r\n    return empty}\r\n    \r\n}\r\n\r\n\r\nexport async function getRoles() {\r\n  const local_token = localStorage.getItem('token');\r\n  try {\r\n      const result = await axiosInstance().get(process.env.REACT_APP_BACKEND_URL + '/roles', {\r\n        headers: {\r\n          'Authorization': `Bearer ${local_token}` \r\n        }\r\n      })\r\n    if(result.data.responseCode === 0) {\r\n      return result.data.data\r\n    }\r\n    else {\r\n      console.log(\"Error\",result.data.responseMessage)\r\n      const empty = []\r\n      return empty\r\n    }\r\n   }\r\n   catch(e){\r\n     console.log(e); \r\n     const empty = []\r\n    return empty}\r\n    \r\n}\r\n\r\n\r\nexport async function getRole(roleName) {\r\n  const local_token = localStorage.getItem('token');\r\n  try {\r\n      const result = await axiosInstance().get(process.env.REACT_APP_BACKEND_URL + '/roles/' + roleName, {\r\n        headers: {\r\n          'Authorization': `Bearer ${local_token}` \r\n        }\r\n      })\r\n    if(result.data.responseCode === 0) {\r\n      return result.data.data\r\n    }\r\n    else {\r\n      console.log(\"Error\",result.data.responseMessage)\r\n      const empty = {}\r\n      return empty\r\n    }\r\n   }\r\n   catch(e){\r\n     console.log(e); \r\n     const empty = {}\r\n    return empty}\r\n    \r\n}\r\n\r\nexport async function getPermissions() {\r\n  const local_token = localStorage.getItem('token');\r\n  try {\r\n      const result = await axiosInstance().get(process.env.REACT_APP_BACKEND_URL + '/permissions', {\r\n        headers: {\r\n          'Authorization': `Bearer ${local_token}` \r\n        }\r\n      })\r\n    if(result.data.responseCode === 0) {\r\n      return result.data.data\r\n    }\r\n    else {\r\n      console.log(\"Error\",result.data.responseMessage)\r\n      const empty = []\r\n      return empty\r\n    }\r\n   }\r\n   catch(e){\r\n     console.log(e); \r\n     const empty = []\r\n    return empty}\r\n    \r\n}\r\n\r\nexport async function getPermission(roleName) {\r\n  const local_token = localStorage.getItem('token');\r\n  try {\r\n      const result = await axiosInstance().get(process.env.REACT_APP_BACKEND_URL + '/roles/' + roleName + '/permissions', {\r\n        headers: {\r\n          'Authorization': `Bearer ${local_token}` \r\n        }\r\n      })\r\n    if(result.data.responseCode === 0) {\r\n      return result.data.data\r\n    }\r\n    else {\r\n      console.log(\"Error\",result.data.responseMessage)\r\n      const empty = []\r\n      return empty\r\n    }\r\n   }\r\n   catch(e){\r\n     console.log(e); \r\n     const empty = []\r\n    return empty}\r\n    \r\n}\r\n\r\nexport async function getPermissionByUser(user) {\r\n  const local_token = localStorage.getItem('token');\r\n  try {\r\n      const result = await axiosInstance().get(process.env.REACT_APP_BACKEND_URL + '/users/' + user + '/permissions', {\r\n        headers: {\r\n          'Authorization': `Bearer ${local_token}` \r\n        }\r\n      })\r\n    if(result.data.responseCode === 0) {\r\n      return result.data.data\r\n    }\r\n    else {\r\n      console.log(\"Error\",result.data.responseMessage)\r\n      const empty = []\r\n      return empty\r\n    }\r\n   }\r\n   catch(e){\r\n     console.log(e); \r\n     const empty = []\r\n    return empty}\r\n    \r\n}\r\n\r\n\r\nexport async function getBands() {\r\n  const local_token = localStorage.getItem('token');\r\n  try {\r\n      const result = await axiosInstance().get(process.env.REACT_APP_BACKEND_URL + '/bands', {\r\n        headers: {\r\n          'Authorization': `Bearer ${local_token}` \r\n        }\r\n      })\r\n    if(result.data.responseCode === 0) {\r\n      return result.data.data\r\n    }\r\n    else {\r\n      console.log(\"Error\",result.data.responseMessage)\r\n      const empty = []\r\n      return empty\r\n    }\r\n   }\r\n   catch(e){\r\n     console.log(e); \r\n     const empty = []\r\n    return empty}\r\n    \r\n}\r\n\r\n\r\nexport async function getMerTransaction(merCode) {\r\n  const local_token = localStorage.getItem('token');\r\n  try {\r\n      const result = await axiosInstance().get(process.env.REACT_APP_BACKEND_URL + '/transactions/merchant/' + merCode + '?orderBy=serviceName&pageNumber=1&recordsPerPage=10', {\r\n        headers: {\r\n          'Authorization': `Bearer ${local_token}` \r\n        }\r\n      })\r\n    if(result.data.responseCode === 0) {\r\n      return result.data\r\n    }\r\n    else {\r\n      console.log(\"Error\",result.data.responseMessage)\r\n      const empty = []\r\n      return empty\r\n    }\r\n   }\r\n   catch(e){\r\n     console.log(e); \r\n     const empty = []\r\n    return empty}\r\n    \r\n}\r\n\r\nexport async function getMerchTransactionsAll(page,records,merCode) {\r\n  const local_token = localStorage.getItem('token');\r\ntry {\r\n  const result = await axiosInstance().get(process.env.REACT_APP_BACKEND_URL + `/transactions/merchant/${merCode}?orderBy=serviceName&pageNumber=${page}&recordsPerPage=${records}` , {\r\n    headers: {\r\n      'Authorization': `Bearer ${local_token}` \r\n    }\r\n  })\r\nif(result.data.responseCode === 0) {\r\n  localStorage.setItem('mer-tcP', page)\r\n  localStorage.setItem('mer-tR', records)\r\n  return result.data\r\n}\r\nelse {\r\n  console.log(\"Error\",result.data.responseMessage)\r\n  const empty = []\r\n  return empty\r\n}\r\n}\r\ncatch(e){\r\n console.log(e); \r\n const empty = []\r\nreturn empty}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport async function getCategory() {\r\n  const local_token = localStorage.getItem('token');\r\n  try {\r\n      const result = await axiosInstance().get(process.env.REACT_APP_BACKEND_URL + '/services/category', {\r\n        headers: {\r\n          'Authorization': `Bearer ${local_token}` \r\n        }\r\n      })\r\n    if(result.data.responseCode === 0) {\r\n      return result.data.data\r\n    }\r\n    else {\r\n      console.log(\"Error\",result.data.responseMessage)\r\n      const empty = []\r\n      return empty\r\n    }\r\n   }\r\n   catch(e){\r\n     console.log(e); \r\n     const empty = []\r\n    return empty}\r\n    \r\n}\r\n\r\nexport async function getServiceCategory(page,records,categoryName) {\r\n  const local_token = localStorage.getItem('token');\r\n  try {\r\n      const result = await axiosInstance().get(process.env.REACT_APP_BACKEND_URL +  '/services/category/' + categoryName + `?orderBy=serviceName&pageNumber=${page}&recordsPerPage=${records}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${local_token}` \r\n        }\r\n      })\r\n\r\n    if(result.data.responseCode === 0) {\r\n      localStorage.setItem('ser-tcP', page)\r\nlocalStorage.setItem('ser-tR', records)\r\n      return result.data\r\n    }\r\n    else {\r\n      console.log(\"Error\",result.data.responseMessage)\r\n      const empty = []\r\n      return empty\r\n    }\r\n   }\r\n   catch(e){\r\n     console.log(e); \r\n     const empty = []\r\n    return empty}\r\n    \r\n}\r\n\r\n\r\nexport async function getTerminal() {\r\n  const local_token = localStorage.getItem('token');\r\n  try {\r\n      const result = await axiosInstance().get(process.env.REACT_APP_BACKEND_URL + '/applications', {\r\n        headers: {\r\n          'Authorization': `Bearer ${local_token}` \r\n        }\r\n      })\r\n    if(result.data.responseCode === 0) {\r\n      return result.data.data\r\n    }\r\n    else {\r\n      console.log(\"Error\",result.data.responseMessage)\r\n      const empty = []\r\n      return empty\r\n    }\r\n   }\r\n   catch(e){\r\n     console.log(e); \r\n     const empty = []\r\n    return empty}\r\n    \r\n}","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\organisations.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\organisation\\organisation.js",["315","316"],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\organisation\\overview.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\organisation\\merchants.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\services\\services.js",["317","318","319"],"import React, { useState, useEffect }  from 'react'\r\nimport { getServices,getServicesAll, getServiceProviders, getServiceCategory,getCategory } from '../../globalApi'\r\nimport axios from 'axios'\r\nimport url from '../../baseUrl.json'\r\nimport Loader from '../../components/ui/loader/loader'\r\nimport State from '../../components/ui/state/state'\r\nimport EmptyData from '../../components/ui/emptyData/emptyData'\r\n\r\nexport default function Services(props) {\r\n    const [services, setServices] = useState([]);\r\n    const [serDetails, setSerDetails] = useState({});\r\n    const [providers, setProviders] = useState([]);\r\n    const [category, setCategory] = useState([]);\r\n    const [loader, setLoader] = useState(false);\r\n    const [formState, setFormState] = useState(false)\r\n    const [formStateType, setFormStateType] = useState('success')\r\n    const [newpage, setNewPage] = useState(0)\r\n    const [newrecord, setNewRecord] = useState(10)\r\n\r\n    let defaultPage = localStorage.getItem('ser-tcP')\r\n    let defaultRecords = localStorage.getItem('ser-tR')\r\n   \r\n   \r\n\r\n    useEffect( () => {\r\n      setNewPage(defaultPage)\r\n      setNewRecord(defaultRecords)\r\n      getServicesAll(defaultPage,defaultRecords).then(async(result) => {\r\n         setSerDetails(result); \r\n         setServices(result.data);\r\n      });\r\n     \r\n        getServiceProviders().then(result => setProviders(result));\r\n        getCategory().then(result => setCategory(result));\r\n      }, [])\r\n\r\n\r\n      const prevPage = () => {\r\n        let currentPage = localStorage.getItem('ser-tcP');\r\n        let defaultRecords = localStorage.getItem('ser-tR')\r\n\r\n          let page = parseInt(currentPage) - 1;    \r\n           console.log(currentPage)\r\n          if(page > 0){\r\n            setLoader(true)\r\n          getServicesAll(page,defaultRecords).then(async(result) => { \r\n            setSerDetails(result); \r\n        \r\n           setServices(result.data);\r\n           setNewPage(page)\r\n            setLoader(false)});\r\n          }\r\n          else{\r\n            return false\r\n          }\r\n      }\r\n      \r\n      const nextPage = () => {\r\n      let currentPage = localStorage.getItem('ser-tcP');\r\n      let defaultRecords = localStorage.getItem('ser-tR')\r\n        let page = parseInt(currentPage) + 1\r\n        if(serDetails.lastPage >= page){\r\n          setLoader(true)\r\n           getServicesAll(page,defaultRecords).then(async(result) => {\r\n            setSerDetails(result); \r\n           \r\n            setServices(result.data);\r\n            setNewPage(page)\r\n              setLoader(false)});\r\n        }\r\n        else{\r\n          return false\r\n        }\r\n      }\r\n    \r\n      const goToPage = (e) =>{\r\n        let currentPage = localStorage.getItem('ser-tcP');\r\n        if (e.key === 'Enter') {\r\n        let defaultRecords = localStorage.getItem('ser-tR')\r\n          if(serDetails.lastPage >= newpage){\r\n            setLoader(true)\r\n             getServicesAll(newpage,defaultRecords).then(async(result) => {\r\n              setSerDetails(result); \r\n           setServices(result.data);\r\n           setNewPage(newpage)\r\n              setLoader(false)});\r\n          }\r\n          else{\r\n            return false\r\n          }\r\n        }\r\n        else{\r\n          return false\r\n        }\r\n      }\r\n    \r\n      const modifyRecords = (e) =>{\r\n        if (e.key === 'Enter') {\r\n        if(serDetails.lastPage >= newpage){\r\n          setLoader(true)\r\n        getServicesAll(newpage,newrecord).then(async(result) => {\r\n           setNewRecord(newrecord)\r\n          setSerDetails(result); \r\n          setServices(result.data);\r\n          setLoader(false)});\r\n        }\r\n        else{\r\n          return false\r\n        }\r\n      }\r\n      else{\r\n        return false\r\n      }\r\n      }\r\n     \r\n    const setDefault = async (providerCode, serviceCode) => {\r\n      setLoader(true)\r\n      const local_token = localStorage.getItem('token');\r\n      try {\r\n          const user = await axios.post(url.url + '/services/default/provider',\r\n          {\r\n            \"providerCode\": providerCode,\r\n            \"serviceCodes\": [serviceCode]\r\n          }, \r\n          {\r\n              headers: {\r\n                  'Authorization': `Bearer ${local_token}` \r\n                }\r\n          })\r\n        if(user.data.responseCode === 0) {\r\n\r\n        setLoader(false);\r\n        setFormState(true);\r\n        setFormStateType('success')\r\n        }\r\n        else if(user.data.responseCode === 400 || 500 ) {\r\n          setLoader(false);\r\n        setFormState(true);\r\n        setFormStateType('failed')\r\n        }\r\n       }\r\n       catch(e){console.log(e)}\r\n      }\r\n\r\n      const resetState = () => {\r\n        setFormState(false)\r\n      }\r\n\r\n      const searchArray = (e) => {\r\n        getServices().then(result =>{\r\n            const test = result.filter(result => {\r\n            return result.serviceName.toLowerCase().includes(e.target.value.toLowerCase());\r\n          });\r\n\r\n          setServices(test);\r\n        \r\n        } )\r\n          \r\n    }\r\n\r\n    const getServiceCategoryFuc = async(result) => {\r\n      let currentPage = localStorage.getItem('ser-tcP');\r\n      let defaultRecords = localStorage.getItem('ser-tR')\r\n      setLoader(true)\r\n      if( result == \"1\") {\r\n        return getServicesAll(defaultPage,defaultRecords).then(async(result) => {\r\n          setSerDetails(result); \r\n          setServices(result.data);\r\n          setLoader(false)\r\n      })\r\n    }\r\n      await getServiceCategory(currentPage,defaultRecords,result).then(result =>  {setSerDetails(result); setServices(result.data);});\r\n      setLoader(false)\r\n    }\r\n    \r\n        return(\r\n            <>\r\n             { formState ? <State closeModal={resetState} state = {formStateType} /> : null }\r\n             { loader ? <Loader/> : null }\r\n\r\n            <div className=\"content-header\">Services</div>\r\n      <div className=\"content-sub\">Here are the list of paysure providers</div>\r\n      <div className=\"app-table-actions\">\r\n      <div className=\"app-table-search\">\r\n        <input onChange={searchArray} type=\"text\" className=\"app-input-search w-input\"  placeholder=\"Search...\" id=\"name\" />\r\n          </div>\r\n          <div className=\"app-table-buttons\">\r\n          <div className=\"styled\">\r\n          <select  onChange={ (e) => getServiceCategoryFuc(e.target.value)}  className=\"app-select w-select\">\r\n                                      <option defaultValue disabled>Filter by Category</option>\r\n                                      <option value='1'>All</option>\r\n                                      {\r\n                                          category.map(result => {\r\n                                              return <option key={result.id} value={ result.categoryName }>{result.categoryName}</option>\r\n                                          })\r\n                                      }\r\n                                \r\n                                    </select>\r\n        </div>\r\n\r\n\r\n        </div>\r\n      </div>\r\n      {\r\n                        services.length <= 0 ? <EmptyData/> :\r\n      <table className=\"app-table2\">\r\n                                  <thead>\r\n                                      <tr className=\"app-table2-row\">\r\n                                      <th className=\"app-table2-header\">Service Code</th>\r\n                                      <th className=\"app-table2-header\">Service Name</th>\r\n                                      <th className=\"app-table2-header\">Category</th>\r\n                                      <th className=\"app-table2-header\">Default Provider</th>\r\n                                      <th className=\"app-table2-header\">Change Default Provider</th>\r\n                                  </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n                                      {\r\n\r\n                                      services.map(result => {\r\n                                          return (\r\n                                              <tr key={result.id} className=\"app-table2-row\">\r\n                                  <td className=\"app-table2-data\">{result.serviceCode}</td>\r\n                                      <td className=\"app-table2-data\">{result.serviceName}</td>\r\n                                      <td className=\"app-table2-data\">{result.serviceCategory}</td>\r\n                                      <td className=\"app-table2-data\">{result.defaultProviderName}</td>\r\n                                      <td className=\"app-table2-data\">\r\n                                    <select style={{ marginTop: '15px'}} onChange={ (e) => setDefault(e.target.value, result.serviceCode)}  className=\"app-select w-select\">\r\n                                    <option defaultValue disabled>Select Default Provider</option>\r\n                                      {\r\n                                          providers.map(result => {\r\n                                              return <option key={result.id} value={ result.providerCode }>{result.providerName}</option>\r\n                                          })\r\n                                      }\r\n                                \r\n                                    </select>\r\n                                      </td>\r\n                                  </tr>     \r\n                                          )\r\n                                      })\r\n\r\n                                      }\r\n                                                                  \r\n                                  </tbody>\r\n                                  </table>\r\n                                  \r\n}\r\n             <div className=\"pagination\">\r\n       <div className=\"pag-col-1\">\r\n         <div className=\"pag-s\"><input onKeyDown={modifyRecords} value={newrecord}  onChange = { (event) => setNewRecord(event.target.value) } className=\"pag-input\" type=\"number\" name=\"page\" max=\"13\" /></div>\r\n         <div className=\"pag-s\"><span style={{marginRight:'10px'}} className=\"pag-s-text\">of {serDetails.totalRecords}</span></div>\r\n       </div>\r\n       <div className=\"pag-col-2\">\r\n        <div className=\"pag-prev\" onClick={ prevPage }>Previous Page</div>\r\n        <div className=\"pag-next\" onClick={ nextPage }>Next Page</div>\r\n       </div>\r\n       <div className=\"pag-col-3\">\r\n         <div className=\"pag-s\"><span className=\"pag-s-text\">Page</span></div>\r\n         <div className=\"pag-s\"><input onKeyDown={goToPage} value={newpage}  onChange = { (event) => setNewPage(event.target.value) } className=\"pag-input\" type=\"number\" name=\"page\" max=\"13\" /></div>\r\n         <div className=\"pag-s\"><span style={{marginRight:'10px'}} className=\"pag-s-text\">of</span><span className=\"pag-s-text\">{serDetails.lastPage}</span></div>\r\n       </div>\r\n      </div>\r\n\r\n</>\r\n    )\r\n\r\n}\r\n","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\service-providers\\addProvider.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\components\\ui\\caution\\caution.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\settings\\settings.js",["320"],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\settings\\band\\bands.js",["321"],"import React, { useState, useEffect } from 'react'\r\nimport AddBand from './createBand'\r\nimport UpdateBand from './updateBand'\r\nimport { getBands } from '../../../globalApi'\r\nimport EmptyData from '../../../components/ui/emptyData/emptyData'\r\nexport default function Bands() {\r\n\r\n  const [bands, setBands] = useState([]);\r\n  \r\n  const [ addBand, setAddBand] = useState(false)\r\n  const [updateBand, setUpdateBand] = useState(false)\r\n  const [band, setBand] = useState({})\r\n\r\n  useEffect( () => {\r\n    getBands().then(result => { setBands(result)})\r\n  }, [])\r\n\r\n  const updateBandList = (newband) => {\r\n  setBands([...bands, newband])\r\n  }\r\n\r\n  const toggleAddBand = () => {\r\n    addBand ? setAddBand(false) :  setAddBand(true)\r\n  }\r\n\r\n  const toggleUpdateBand = async (result) => {\r\n    await setBand(result)\r\n    console.log('result>>>>>>', band)\r\n    console.log('result22>>>>>>', result)\r\n    updateBand ? setUpdateBand(false) :  setUpdateBand(true)\r\n  }\r\n\r\n  const searchArray = (e) => {\r\n    getBands().then(result =>{\r\n        const test = result.filter(result => {\r\n        return result.bandName.toLowerCase().includes(e.target.value.toLowerCase());\r\n      });\r\n\r\n      setBands(test);\r\n    \r\n    } )\r\n      \r\n}\r\n  \r\n    return (\r\n    <>\r\n     {\r\n           addBand ? <AddBand updateBandList = {updateBandList} closeModal = {toggleAddBand}/> :\r\n           updateBand ? <UpdateBand band = {band} updateBandList = {updateBandList} closeModal = {toggleUpdateBand}/> : null\r\n              }\r\n          <div className=\"content-header\">Bands</div>\r\n      <div className=\"content-sub\">Here are the list of bands</div>\r\n      <div className=\"app-table-actions\">\r\n        <div className=\"app-table-search\">\r\n        <input onChange={searchArray} type=\"text\" className=\"app-input-search w-input\"  placeholder=\"Search...\" id=\"name\" />\r\n          </div>\r\n          <div className=\"app-table-buttons\">\r\n          <a href=\"#\" onClick={ toggleAddBand } className=\"table-button filter\">Create Band<span className=\"table-button-icon\"></span></a>\r\n        </div>\r\n      </div>\r\n      <div>\r\n      {\r\n              bands.length <= 0 ? <EmptyData/> :\r\n      <table className=\"app-table2\">\r\n                                  <thead>\r\n                                      <tr className=\"app-table2-row\">\r\n                                     <th className=\"app-table2-header\"><input type = \"checkbox\" /></th>\r\n                                     <th className=\"app-table2-header\">Band Name</th>\r\n                                    <th className=\"app-table2-header\">Band Description</th>\r\n                                    <th className=\"app-table2-header\">Daily Limit</th>\r\n                                    <th className=\"app-table2-header\">Airtime Limit</th>\r\n                                    <th className=\"app-table2-header\">Transfer Limit</th>\r\n                                    <th className=\"app-table2-header\">Withdrawal Limit</th>\r\n                                    <th className=\"app-table2-header\"></th>\r\n                                  </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n                                    {\r\n                                      bands.map( result => {\r\n                                        return(\r\n                                        <tr key={result.id} className=\"app-table2-row\">\r\n                                        <td className=\"app-table2-data\"><input type = \"checkbox\" /></td>\r\n                                        <td style={{textTransform: 'capitalize'}} className=\"app-table2-data\">{result.bandName}</td>\r\n                                        <td className=\"app-table2-data\">{result.bandDescription}</td>\r\n                                        <td className=\"app-table2-data\">{result.dailyCumulativeLimit}</td>\r\n                                        <td className=\"app-table2-data\">{result.airtimeLimit}</td>\r\n                                        <td className=\"app-table2-data\">{result.transferLimit}</td>\r\n                                        <td className=\"app-table2-data\">{result.withdrawalLimit}</td>\r\n                                        <td className=\"app-table2-data\" style={{color:'#de4343', fontWeight: 'bold', cursor: 'pointer'}}>\r\n                                      <div onClick={ () => { toggleUpdateBand(result)}} >Update Band</div>\r\n                                      </td>\r\n                                      </tr>\r\n                                        )\r\n                                      })\r\n                                    }\r\n                                    \r\n                                  </tbody>\r\n                                  \r\n                                  \r\n                                  </table>\r\n}\r\n      </div>\r\n    </>\r\n    )\r\n}","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\settings\\band\\createBand.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\settings\\band\\updateBand.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\components\\ui\\loader\\loader.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\components\\ui\\state\\state.js",["322"],"import React from 'react'\r\nexport default function State({state, closeModal, message}) {\r\n    return(\r\n        <>\r\n        <div style={{ zIndex : 999999 }}className=\"app-modal-overlay\">\r\n    <div className=\"app-modal-div success\" style={{ textAlign:'center'}}>\r\n        {\r\n            state == 'success' ?  <div > <div className=\"alert-icon\"></div> <div className=\"alert-message\">{message}</div> </div> : \r\n            \r\n            <div> \r\n            <div className=\"alert-icon failed\"></div>\r\n            <div className=\"alert-message\" style={{width:'200px'}}>{message}</div>\r\n            </div>\r\n            \r\n        } \r\n     <div onClick={closeModal} style={{cursor:'pointer'}} className=\"app-modal-button\">Close</div>\r\n    </div>\r\n  </div>\r\n        </>\r\n    )\r\n}","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\organisation\\merchant\\merchant.js",["323"],"import React, { useState, useEffect }  from 'react'\r\nimport Leftbar from '../../../../components/leftbar/leftbar'\r\nimport Rightbar from '../../../../components/rightbar/rightbar'\r\nimport Overview from './overview'\r\nimport Users from './users'\r\nimport Transactions from './transactions'\r\nimport { Redirect, useParams } from 'react-router-dom'\r\nimport {getUsers2, getMerTransaction,getMerchant,getWalletBalance } from '../../../../globalApi'\r\nexport default function Product() {\r\n        \r\n    const [ backRoute, setBackRoute] = useState(false);\r\n    const [ overview, setOverview] = useState(true);\r\n    const [ users, setUsers] = useState(false);\r\n    const [ transactions, setTransactions] = useState(false);\r\n    const [merchant, setMerchant] = useState({})\r\n    const [admin, setAdmin] = useState([]);\r\n    const [trans, setTrans] = useState([]);\r\n    const[wallet, setWallet] = useState({})\r\n    const[transDetails, setTransDetails] = useState({})\r\n    let { id } = useParams();\r\n    const orgCode = localStorage.getItem('orgCode');\r\n   \r\n  useEffect( () => {\r\n    getWalletBalance(id).then(result => setWallet(result)); \r\n    getMerchant(id).then(result => { setMerchant(result)})\r\n    getUsers2(id).then(result => { setAdmin(result)})\r\n    getMerTransaction(id).then(result => {setTransDetails(result); setTrans(result.data)})\r\n  }, [])\r\n\r\n\r\n  const toBack = () => {\r\n    setBackRoute(true)\r\n  }\r\n\r\n    const changeOverview = () => {\r\n      setOverview(true)\r\n      setUsers(false)\r\n      setTransactions(false)\r\n\r\n    }\r\n\r\n    const changeUsers = () => {\r\n      setOverview(false)\r\n      setUsers(true)\r\n      setTransactions(false)\r\n\r\n    }\r\n\r\n    const changeTransactions = () => {\r\n      setOverview(false)\r\n      setUsers(false)\r\n      setTransactions(true)\r\n    }\r\n\r\n\r\n    if (!localStorage.getItem(\"token\")) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    if(backRoute){\r\n      return <Redirect to = { \"/organisation/\" + orgCode} />;\r\n    }\r\n\r\n        return(\r\n            <div className=\"app-admin-section\">\r\n            <div className=\"app-admin-col-1\">\r\n            <Leftbar/>\r\n            </div>\r\n            <div className=\"app-admin-col-2\">\r\n            <div className=\"admin-top-bar\">\r\n        <div className=\"admin-top-bar-left\">\r\n        <div onClick={ toBack } className=\"settings-icon\"></div> \r\n          <div onClick = { changeOverview }  className={overview ? 'admin-top-barlinks admin-active-top-link' : 'admin-top-barlinks'}>Overview</div>\r\n          <div onClick = { changeUsers }  className={users ? 'admin-top-barlinks admin-active-top-link' : 'admin-top-barlinks'}>Users</div>\r\n          <div onClick = { changeTransactions }  className={transactions ? 'admin-top-barlinks admin-active-top-link' : 'admin-top-barlinks'}>Transactions</div>\r\n        </div>\r\n        <div className=\"admin-top-bar-right\">\r\n          <div className=\"admin-topbar-date\">October 8th, 2020</div>\r\n        </div>\r\n      </div>\r\n\r\n      { overview ? <Overview transDetails={transDetails} wallet = {wallet} merchant = {merchant} /> \r\n      : users ? <Users admin = { admin } />\r\n      : transactions ? <Transactions trans = {trans} />\r\n      : <Overview transDetails={transDetails}  wallet = {wallet} merchant = {merchant} /> }\r\n\r\n    </div>\r\n      <div className=\"app-admin-col-3\">\r\n              <Rightbar />\r\n            </div>\r\n</div>\r\n    )\r\n}\r\n","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\organisation\\merchant\\overview.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\organisation\\merchant\\transactions.js",["324","325","326","327","328","329","330","331"],"\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Redirect, useParams } from 'react-router-dom'\r\nimport { getMerchTransactionsAll,getServiceProviders } from '../../../../globalApi'\r\nimport Loader from '../../../../components/ui/loader/loader'\r\nimport ViewTrans from './viewTrans'\r\nimport ExportReport from '../../../Export'\r\nimport NumberFormat from 'react-number-format';\r\nimport EmptyData from '../../../../components/ui/emptyData/emptyData'\r\nexport default function Transactions() {\r\n    \r\n  const [transactions, setTransactions] = useState([]);\r\n  const [alltransactions, setAllTransactions] = useState([]);\r\n  const [transDetails, setTransDetails] = useState({});\r\n  const [loader, setLoader] = useState(false);\r\n const [trans, setTrans] = useState({})\r\n const [viewTrans, setViewTrans] = useState(false)\r\n const [exportreport, setExport] = useState(false)\r\n const [newpage, setNewPage] = useState(0)\r\n const [newrecord, setNewRecord] = useState(10)\r\n const [providers, setProviders] = useState([]);\r\n const [ startDate, setStartDate] = useState()\r\n const [ endDate, setEndDate] = useState()\r\n\r\n let { id } = useParams();\r\n let defaultPage = localStorage.getItem('mer-tcP')\r\n let defaultRecords = localStorage.getItem('mer-tR')\r\n\r\n\r\n \r\n  useEffect(() => { \r\n    setNewPage(defaultPage)\r\n    setNewRecord(defaultRecords)\r\n    getMerchTransactionsAll(defaultPage,defaultRecords, id).then(async(result) => {\r\n       setTransDetails(result); \r\n       const res = await result.data.sort(function(a, b) {\r\n        var c = new Date(a.transactionDate);\r\n        var d = new Date(b.transactionDate);\r\n        return d-c;\r\n    });\r\n      setTransactions(res)});\r\n      getServiceProviders().then(result => setProviders(result));\r\n  }, [])\r\n\r\n  const getTrans = async(result) => {\r\n  await setTrans(result)\r\n   viewTrans ? setViewTrans(false) :  setViewTrans(true)\r\n  }\r\n  \r\n  const toggleTrans = () => {\r\n    viewTrans ? setViewTrans(false) :  setViewTrans(true)\r\n  }\r\n\r\n  const toggleExport = async() => {\r\n    setLoader(true)\r\n    await getMerchTransactionsAll(1,transDetails.totalRecords,id).then(async(result) => {\r\n     setAllTransactions(result.data)});\r\n     setLoader(false)\r\n    exportreport ? setExport(false) :  setExport(true)\r\n  }\r\n\r\n  const prevPage = () => {\r\n    let currentPage = localStorage.getItem('mer-tcP');\r\n    let defaultRecords = localStorage.getItem('mer-tR')\r\n      let page = parseInt(currentPage) - 1\r\n      if(page > 0){\r\n        setLoader(true)\r\n      getMerchTransactionsAll(page,defaultRecords,id).then(async(result) => { \r\n        setTransDetails(result); \r\n        const res = await result.data.sort(function(a, b) {\r\n         var c = new Date(a.transactionDate);\r\n         var d = new Date(b.transactionDate);\r\n         return d-c;\r\n     });\r\n       setTransactions(res);\r\n       setNewPage(page)\r\n        setLoader(false)});\r\n      }\r\n      else{\r\n        return false\r\n      }\r\n  }\r\n  \r\n  const nextPage = () => {\r\n  let currentPage = localStorage.getItem('mer-tcP');\r\n  let defaultRecords = localStorage.getItem('mer-tR')\r\n    let page = parseInt(currentPage) + 1\r\n    if(transDetails.lastPage >= page){\r\n      setLoader(true)\r\n       getMerchTransactionsAll(page,defaultRecords,id).then(async(result) => {\r\n        setTransDetails(result); \r\n        const res = await result.data.sort(function(a, b) {\r\n         var c = new Date(a.transactionDate);\r\n         var d = new Date(b.transactionDate);\r\n         return d-c;\r\n     });\r\n       setTransactions(res);\r\n       setNewPage(page)\r\n          setLoader(false)});\r\n    }\r\n    else{\r\n      return false\r\n    }\r\n  }\r\n\r\n  const goToPage = (e) =>{\r\n    if (e.key === 'Enter') {\r\n    let defaultRecords = localStorage.getItem('mer-tR')\r\n      if(transDetails.lastPage >= newpage){\r\n        setLoader(true)\r\n         getMerchTransactionsAll(newpage,defaultRecords,id).then(async(result) => {\r\n          setTransDetails(result); \r\n          const res = await result.data.sort(function(a, b) {\r\n           var c = new Date(a.transactionDate);\r\n           var d = new Date(b.transactionDate);\r\n\r\n           return d-c;\r\n       });\r\n         setTransactions(res)\r\n         setNewPage(newpage)\r\n          setLoader(false)});\r\n      }\r\n      else{\r\n        return false\r\n      }\r\n    }\r\n    else{\r\n      return false\r\n    }\r\n  }\r\n\r\n  const modifyRecords = (e) =>{\r\n    if (e.key === 'Enter') {\r\n    if(transDetails.lastPage >= newpage){\r\n      setLoader(true)\r\n    getMerchTransactionsAll(newpage,newrecord,id).then(async(result) => {\r\n      \r\n      setTransDetails(result); \r\n      const res = await result.data.sort(function(a, b) {\r\n       var c = new Date(a.transactionDate);\r\n       var d = new Date(b.transactionDate);\r\n       return d-c;\r\n   });\r\n     setTransactions(res)\r\n     setNewPage(newpage)\r\n     setNewRecord()\r\n      setLoader(false)});\r\n    }\r\n    else{\r\n      return false\r\n    }\r\n  }\r\n  else{\r\n    return false\r\n  }\r\n  }\r\n\r\n     \r\n\r\n  const filterByStatus = (status) =>{\r\n    if( status == \"All\") {\r\n      setLoader(true)\r\n      return getMerchTransactionsAll(1,10,id).then(async(result) => {\r\n        setTransDetails(result); \r\n        const res = await result.data.sort(function(a, b) {\r\n         var c = new Date(a.transactionDate);\r\n         var d = new Date(b.transactionDate);\r\n         return d-c;\r\n     });\r\n       setTransactions(res)\r\n       let currentPage = localStorage.getItem('mer-tcP');\r\n       let defaultRecords = localStorage.getItem('mer-tR')\r\n       setNewPage(currentPage)\r\n       setNewRecord(defaultRecords)\r\n       setLoader(false)\r\n      });\r\n      \r\n    }\r\n    setLoader(true)\r\n          getMerchTransactionsAll(1,transDetails.totalRecords,id).then(async(result) => {\r\n      setTransDetails(result); \r\n      const res = await result.data.sort(function(a, b) {\r\n       var c = new Date(a.transactionDate);\r\n       var d = new Date(b.transactionDate);\r\n       return d-c;\r\n   });\r\n     const trans = res.filter( x => { return x.transactionStatus == status})\r\n     setTransactions(trans)});\r\n     let currentPage = localStorage.getItem('mer-tcP');\r\n     let defaultRecords = localStorage.getItem('mer-tR')\r\n     setNewPage(currentPage)\r\n     setNewRecord(defaultRecords)\r\n     setLoader(false)\r\n  }\r\n\r\n\r\n  const filterByProvider = (provider) =>{\r\n    let currentPage = localStorage.getItem('mer-tcP');\r\n    let defaultRecords = localStorage.getItem('mer-tR')\r\n    if( provider == \"0\") {\r\n      setLoader(true)\r\n      return getMerchTransactionsAll(1,10,id).then(async(result) => {\r\n        setTransDetails(result); \r\n        const res = await result.data.sort(function(a, b) {\r\n         var c = new Date(a.transactionDate);\r\n         var d = new Date(b.transactionDate);\r\n         return d-c;\r\n     });\r\n       setTransactions(res)\r\n       let currentPage = localStorage.getItem('mer-tcP');\r\n       let defaultRecords = localStorage.getItem('mer-tR')\r\n       setNewPage(currentPage)\r\n       setNewRecord(defaultRecords)\r\n       setLoader(false)\r\n      }\r\n       \r\n       );\r\n      \r\n    }\r\n    setLoader(true)\r\n    getMerchTransactionsAll(1,transDetails.totalRecords,id).then(async(result) => {\r\n      setTransDetails(result); \r\n      const res = await result.data.sort(function(a, b) {\r\n       var c = new Date(a.transactionDate);\r\n       var d = new Date(b.transactionDate);\r\n       return d-c;\r\n   });\r\n     const trans = res.filter( x => { return x.providerName == provider})\r\n     setTransactions(trans);\r\n     let currentPage = localStorage.getItem('mer-tcP');\r\n     let defaultRecords = localStorage.getItem('mer-tR')\r\n     setNewPage(currentPage)\r\n     setNewRecord(defaultRecords)\r\n     setLoader(false)});\r\n  }\r\n\r\n  const filterByDate = async (e) => {\r\n    e.preventDefault();\r\n    setLoader(true)\r\n    await getMerchTransactionsAll(1,transDetails.totalRecords,id).then(async(result) => {\r\n      setTransDetails(result); \r\nconst newTrans = await result.data.filter(item => {\r\n   const transDate = new Date(item.transactionDate).toISOString().substr(0,10);\r\n   return transDate >= startDate && transDate <= endDate;\r\n})\r\nsetTransactions(newTrans);\r\nlet currentPage = localStorage.getItem('mer-tcP');\r\nlet defaultRecords = localStorage.getItem('mer-tR')\r\nsetNewPage(currentPage)\r\nsetNewRecord(defaultRecords)\r\nsetLoader(false);\r\n});\r\n\r\n}\r\n\r\n    if (!localStorage.getItem(\"token\")) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n\r\n        return(\r\n          <div>\r\n            { viewTrans ? <ViewTrans trans={trans} closeModal={toggleTrans}/> : null }\r\n            {exportreport ? <ExportReport alltransactions={alltransactions} closeModal={toggleExport}/> : null}\r\n            { loader ? <Loader/> : null }\r\n      <div className=\"app-table-actions\">\r\n                    <div className=\"app-table-search\">\r\n                    <div className=\"content-header\">Paysure Core - Transactions</div>\r\n                    <div className=\"content-sub\">Here are the latest report on Paysure Core</div>\r\n                    </div>\r\n                    <div className=\"app-table-buttons\">\r\n                      {\r\n                         transactions.length <= 0 ? '' : \r\n                         <div onClick={toggleExport} style={{cursor:'pointer'}} className=\"table-button filter\">Export Report<span className=\"table-button-icon\"></span></div>\r\n\r\n                      }\r\n                    </div>\r\n                </div>\r\n                {\r\n              transactions.length <= 0 ? <EmptyData/> :\r\n      <div>\r\n      <div className=\"app-table-actions\">\r\n        <div>\r\n          <form className=\"app-table-select\" onSubmit={filterByDate}>\r\n                   <input onChange = { (event) => setStartDate(event.target.value) } style={{ marginRight:'20px',width:'40%'}} type=\"date\" className=\"app-modal-form-field w-input\"   required/>\r\n        <input onChange = { (event) => setEndDate(event.target.value) } style={{ marginRight:'20px',width:'40%'}}  type=\"date\" className=\"app-modal-form-field w-input\"   required/>\r\n        <button type=\"submit\" style={{fontSize:'15px',cursor:'pointer',height:'40px'}} className=\"app-icon table-button filter\"><span className=\"table-button-icon\"></span></button> \r\n          </form>\r\n\r\n          </div>\r\n        <div className=\"app-table-select\">\r\n                  <select style={{ marginRight:'20px'}}  onChange={ (e) => filterByStatus(e.target.value)}  className=\"app-select w-select\">\r\n                                      <option selected disabled>Filter by Status</option>\r\n                                      <option value=\"All\">All</option>\r\n                                      <option value=\"0\">Successful</option>\r\n                                      <option value=\"1\">Failed</option>\r\n                                    </select>\r\n                                    <select  onChange={ (e) => filterByProvider(e.target.value)}  className=\"app-select w-select\">\r\n                                      <option selected disabled>Filter by Provider</option>\r\n                                      <option value=\"All\">All</option>\r\n                                      {\r\n                                          providers.map(result => {\r\n                                              return <option key={result.id} value={ result.providerName }>{result.providerName}</option>\r\n                                          })\r\n                                      }\r\n                                \r\n                                    </select>\r\n\r\n        </div>\r\n      </div>\r\n      <div>\r\n      <table className=\"app-table2\">\r\n                                  <thead>\r\n                                      <tr className=\"app-table2-row\">\r\n                                      <th className=\"app-table2-header\">Provider</th>\r\n                                      <th className=\"app-table2-header\">Channel</th>\r\n                                      <th className=\"app-table2-header\">Service</th>\r\n                                      <th className=\"app-table2-header\">Total Amount</th>\r\n                                    <th className=\"app-table2-header\">Trans-Status</th>\r\n                                    <th className=\"app-table2-header\">Trans.Date</th>\r\n                                    <th className=\"app-table2-header\"></th>\r\n                                  </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n                                  {\r\n                                      transactions.map( result => {\r\n                                        return(\r\n                                     <tr key={result.id} className=\"app-table2-row\">\r\n                                        <td className=\"app-table2-data\">{result.providerName}</td>\r\n                                        <td className=\"app-table2-data\">{result.channel}</td>\r\n                                        <td className=\"app-table2-data\">{result.serviceName}</td>\r\n                                        <td className=\"app-table2-data\">\r\n                                        <NumberFormat value={result.amount} displayType={'text'} thousandSeparator={true} prefix={'₦'} renderText={(value, props) => <div {...props}>{value}</div>} />\r\n                                          </td>\r\n                                        { result.transactionStatus == 0 ? \r\n                                          <td className=\"app-table2-data table-active\">Successful</td> \r\n                                        : \r\n                                        <td className=\"app-table2-data table-inactive\">Failed</td>\r\n                                        }\r\n                                        <td className=\"app-table2-data\">{result.transactionDate}</td>\r\n                                        <td className=\"app-table2-data\" style={{ color: '#131573', fontWeight: 'bold', cursor: 'pointer' }}>\r\n                                        <div onClick={ () => { getTrans(result)}}>View Details <span className=\"app-icon\"></span></div>\r\n                                        </td>\r\n                                  </tr>\r\n                                        )\r\n                                      })\r\n                                    }                                \r\n                                  </tbody>                  \r\n                                  </table>\r\n      </div>\r\n             <div className=\"pagination\">\r\n       <div className=\"pag-col-1\">\r\n         <div className=\"pag-s\"><input onKeyDown={modifyRecords} value={newrecord}  onChange = { (event) => setNewRecord(event.target.value) } className=\"pag-input\" type=\"number\" name=\"page\" max=\"13\" /></div>\r\n         <div className=\"pag-s\"><span style={{marginRight:'10px'}} className=\"pag-s-text\">of {transDetails.totalRecords}</span></div>\r\n       </div>\r\n       <div className=\"pag-col-2\">\r\n        <div className=\"pag-prev\" onClick={ prevPage }>Previous Page</div>\r\n        <div className=\"pag-next\" onClick={ nextPage }>Next Page</div>\r\n       </div>\r\n       <div className=\"pag-col-3\">\r\n         <div className=\"pag-s\"><span className=\"pag-s-text\">Page</span></div>\r\n         <div className=\"pag-s\"><input onKeyDown={goToPage} value={newpage}  onChange = { (event) => setNewPage(event.target.value) } className=\"pag-input\" type=\"number\" name=\"page\" max=\"13\" /></div>\r\n         <div className=\"pag-s\"><span style={{marginRight:'10px'}} className=\"pag-s-text\">of</span><span className=\"pag-s-text\">{transDetails.lastPage}</span></div>\r\n       </div>\r\n      </div>\r\n</div>\r\n}\r\n    </div>\r\n\r\n    )\r\n}\r\n","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\organisation\\merchant\\users.js",["332","333","334"],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\user-management\\Roles\\addPermission.js",["335","336"],"import React, { useState }  from 'react'\r\nimport axios from 'axios'\r\nimport url from '../../../baseUrl.json'\r\nimport Loader from '../../../components/ui/loader/loader'\r\nimport State from '../../../components/ui/state/state'\r\nimport { useParams} from 'react-router-dom'\r\nexport default function AddPermission(props) {\r\n    \r\n    const bandForm = {\r\n         bandName: \"\",\r\n        bandDescription: \"\",\r\n        dailyCumulativeLimit: 0,\r\n        airtimeLimit: 0,\r\n        transferLimit: 0,\r\n        withdrawalLimit: 0\r\n    }\r\n    const [modalArray, setModalArray] = useState([])\r\n    const [ bandData, setBandData] = useState(bandForm)\r\n    const [loader, setLoader] = useState(false)\r\n    const [formState, setFormState] = useState(false)\r\n    const [formStateType, setFormStateType] = useState('success')\r\n\r\n    let { id } = useParams();\r\n\r\n   const addtoArray = (result) => {\r\n       console.log('clicked')\r\n       setModalArray([...modalArray, result])\r\n   }\r\n\r\n   const removePerm = (index) => {\r\n       console.log('index', index)\r\n    modalArray.splice(index, 1);\r\n    setModalArray([...modalArray]) \r\n    console.log(modalArray)\r\n    \r\n  };\r\n  const permData = {\r\n    \"roles\": [id],\r\n    \"permissions\": modalArray\r\n  }\r\n\r\n    const addPermission = async(e) => {\r\n        e.preventDefault();\r\n        console.log('araaaa', permData)\r\n        setLoader(true)\r\n        const local_token = localStorage.getItem('token');\r\n        try {\r\n            const user = await axios.post(url.url + '/roles/addpermissions',{\r\n                \"roles\": [id],\r\n                \"permissions\": modalArray\r\n            }, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${local_token}` \r\n                  }\r\n            })\r\n          if(user.data.responseCode === 0) {\r\n            props.updatePermissionList(modalArray);\r\n          setLoader(false);\r\n          setFormState(true);\r\n          setFormStateType('success')\r\n          }\r\n          else {\r\n            setLoader(false);\r\n          setFormState(true);\r\n          setFormStateType('failed')\r\n          }\r\n         }\r\n         catch(e){console.log(e)}\r\n    }\r\n\r\n    const resetState = () => {\r\n        setFormState(false)\r\n      props.closeModal()\r\n    }\r\n    return(\r\n        <>\r\n        {\r\n            formState ? <State closeModal={resetState} state = {formStateType} /> :\r\n              <div className=\"app-modal-overlay\">\r\n      <div className=\"app-modal-div\">\r\n          { loader? <Loader/> : null }\r\n      <div className=\"app-modal-heading\">\r\n        <div className=\"app-modal-header\">Add Permission</div>\r\n      </div>\r\n      <div className=\"w-form\">\r\n          <form onSubmit={ addPermission }>\r\n          <select style={{ marginBottom: '30px'}} onChange={ (e) => addtoArray(e.target.value)}  className=\"app-select w-select\">\r\n              {\r\n                  props.permissions.map(result => {\r\n                      return <option key={result.id} value={ result.permissionName }>{result.permissionDescription}</option>\r\n                  })\r\n              }\r\n        \r\n            </select>\r\n            {\r\n                  modalArray.map((result, index) => {\r\n                    return(\r\n                      <div key={result} style={{marginRight:'20px',marginBottom:'20px', background: '#ededed', padding:'10px', borderRadius:'5px', display:'inline-block', color: '#696969', fontSize: '13px'}}>\r\n                 {result} <span onClick={()=>{ removePerm(index)}} style={{ cursor: 'pointer', fontWeight: 'bold', color:'red', marginLeft:'10px'}}>X</span>\r\n               </div>\r\n                    )\r\n                  })\r\n                }\r\n          <button type=\"submit\" style={{marginTop:'20px',display:'block', cursor:'pointer'}} className=\"app-modal-button\">Add Permission</button>\r\n        </form>\r\n      </div>\r\n      <div onClick= {props.closeModal} className=\"app-modal-close\"></div>\r\n    </div>\r\n  </div>\r\n        }\r\n      \r\n        </>\r\n    )\r\n}","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\addOrganisation.js",["337"],"import React, { useState }  from 'react'\r\nimport axios from 'axios'\r\nimport url from '../../baseUrl.json'\r\nimport Loader from '../../components/ui/loader/loader'\r\nimport State from '../../components/ui/state/state'\r\nimport State2 from '../../components/ui/state/state2'\r\n\r\nexport default function AddBrand(props) {\r\n    \r\n      const orgForm = {\r\n        id: -52572128,\r\n        abbreviation: \"\",\r\n        organisationName: \"\",\r\n        contactPhoneNumber: \"\",\r\n        contactAddress: \"\",\r\n        contactEmailAddress: \"\",\r\n        logoUrl: \"\",\r\n        parentOrganisationCode: url.org_code.toString()\r\n    }  \r\n\r\n    const merForm = {\r\n        username: \"\",\r\n        password: \"\",\r\n        transactionPin:\"\",\r\n        merchantName: \"\",\r\n        contactPersonName: \"\",\r\n        phoneNumber: \"\",\r\n        emailAddress: \"\",\r\n        logoUrl: \"\",\r\n        bvn: \"\",\r\n        addressLine1: \"\",\r\n        addressLine2: \"\",\r\n        state: \"\",\r\n        lga: \"\",\r\n        city: \"\",\r\n        bandName: \"\",\r\n        roleName: \"b2b\"\r\n    }\r\n\r\n    const [ orgData, setorgData] = useState(orgForm)\r\n    const [ merData, setmerData] = useState(merForm)\r\n    const [loader, setLoader] = useState(false)\r\n    const [formState, setFormState] = useState(false)\r\n    const [formStateType, setFormStateType] = useState('success')\r\n    const [formState2, setFormState2] = useState(false)\r\n    const [formStateType2, setFormStateType2] = useState('success')\r\n    const [orgState, setOrgState] = useState(true)\r\n    const [modalArray, setModalArray] = useState([])\r\n    const [ip, setIp] = useState('')\r\n    const [orgCode, setorgCode] = useState('')\r\n    const [message, setMessage] = useState('')\r\n   \r\n\r\n    const addtoArray = () => {\r\n        setIp('')\r\n        setModalArray([...modalArray, ip])\r\n    }\r\n\r\n    const removePerm = (index) => {\r\n     modalArray.splice(index, 1);\r\n     setModalArray([...modalArray]) \r\n     \r\n   };\r\n\r\n    const CreateOrg = async(e) => {\r\n        e.preventDefault();\r\n        setLoader(true)\r\n        const local_token = localStorage.getItem('token');\r\n        try {\r\n            const user = await axios.post(url.url + '/organisations', orgData, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${local_token}` \r\n                  }\r\n            })\r\n          if(user.data.responseCode === 0) {\r\n            setMessage(user.data.responseMessage)\r\n            setorgData(orgForm)\r\n          props.updateOrgList(user.data.data);\r\n          setorgCode(user.data.data.organisationCode)\r\n          setLoader(false);\r\n          setFormState(true);\r\n          setFormStateType('success')\r\n          setOrgState(false)\r\n         \r\n          }\r\n          else {\r\n            setMessage(user.data.responseMessage)\r\n            setLoader(false);\r\n          setFormState(true);\r\n          setFormStateType('failed')\r\n          setOrgState(true)\r\n         \r\n          }\r\n         }\r\n         catch(e){console.log(e)}\r\n    }\r\n\r\n\r\n    const CreateMer = async(e) => {\r\n        e.preventDefault();\r\n        setLoader(true)\r\n        const local_token = localStorage.getItem('token');\r\n        try {\r\n            const user = await axios.post(url.url + '/b2b/register',\r\n             {\r\n                ...merData,\r\n                organisationCode: orgCode,\r\n                ipAddresses: modalArray\r\n\r\n            }, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${local_token}` \r\n                  }\r\n            })\r\n          if(user.data.responseCode === 0) {\r\n            setMessage(user.data.responseMessage)\r\n          setLoader(false);\r\n          setFormState2(true);\r\n          setFormStateType2('success')   \r\n        \r\n          }\r\n          else {\r\n            setMessage(user.data.responseMessage)\r\n            setLoader(false);\r\n          setFormState2(true);\r\n          setFormStateType2('failed')\r\n          \r\n          }\r\n         }\r\n         catch(e){console.log(e)}\r\n    }\r\n\r\n    const resetState = () => {\r\n        setFormState(false)\r\n    }\r\n    const resetState2 = () => {\r\n      setFormState2(false)\r\n  }\r\n    return(\r\n        <>\r\n             { loader? <Loader/> : null } \r\n             {  formState ? <State message={message} closeModal={resetState} state = {formStateType} /> : null }\r\n             {  formState2 ? <State2 message={message} closeModal={resetState2} closeSession={props.closeModal} state = {formStateType2} /> : null }\r\n         \r\n               {\r\n        orgState ?  \r\n              <div className=\"app-modal-overlay\">\r\n      <div className=\"app-modal-div\" style={{width:\"70%\", height: \"90%\", overflow:\"auto\"}}>\r\n        <div className=\"app-modal-heading\">\r\n        <div className=\"app-modal-header\">Create an Organisation</div>\r\n      </div>\r\n      <div>\r\n          <form onSubmit={ CreateOrg }>\r\n          <div className=\"form-flex\">\r\n        <div className=\"form-flex-col\">\r\n          <input value={orgData.abbreviation} onChange={ (e) => { setorgData({ ...orgData, abbreviation: e.target.value  }) }} type=\"text\" className=\"app-modal-form-field w-input\"  placeholder=\"Abbreviation\"  required/>\r\n          </div>\r\n          <div className=\"form-flex-col\">\r\n          <input value={orgData.organisationName} onChange={ (e) => { setorgData({ ...orgData, organisationName: e.target.value  }) }} type=\"text\" className=\"app-modal-form-field w-input\"  placeholder=\"Organisation Name\"  required/>\r\n          </div>\r\n          <div className=\"form-flex-col\">\r\n          <input value={orgData.contactPhoneNumber} onChange={ (e) => { setorgData({ ...orgData, contactPhoneNumber: e.target.value  }) }} type=\"text\" className=\"app-modal-form-field w-input\"  placeholder=\"Phone Number\"  required/>\r\n          </div>\r\n          <div className=\"form-flex-col\">\r\n          <input value={orgData.contactAddress} onChange={ (e) => { setorgData({ ...orgData, contactAddress: e.target.value  }) }} type=\"text\" className=\"app-modal-form-field w-input\"  placeholder=\"Address\"  required/>\r\n         </div>\r\n         <div className=\"form-flex-col\">\r\n          <input value={orgData.contactEmailAddress}  onChange={ (e) => { setorgData({ ...orgData, contactEmailAddress: e.target.value  }) }} type=\"email\" className=\"app-modal-form-field w-input\"  placeholder=\"Email Address\"  required/>\r\n          </div>\r\n          <div className=\"form-flex-col\"> \r\n          <input value={orgData.logoUrl}  onChange={ (e) => { setorgData({ ...orgData, logoUrl: e.target.value  }) }} type=\"text\" className=\"app-modal-form-field w-input\"  placeholder=\"Logo Url\"  required/>\r\n          </div>\r\n </div>\r\n <button type=\"submit\" style={{cursor:'pointer'}} className=\"app-modal-button\">Create Organisation</button>\r\n  </form>\r\n      </div>\r\n      <div onClick= {props.closeModal} className=\"app-modal-close\"></div>\r\n      </div>\r\n      </div>\r\n      : \r\n      <div className=\"app-modal-overlay\">\r\n      <div className=\"app-modal-div\" style={{width:\"70%\", height: \"90%\", overflow:\"auto\"}}>\r\n      <div className=\"app-modal-heading\">\r\n      <div className=\"app-modal-header\">Create a Merchant</div>\r\n    </div>\r\n    <div>\r\n        <form onSubmit={ CreateMer }>\r\n        <div className=\"form-flex\">\r\n      <div className=\"form-flex-col\">\r\n        <input onChange={ (e) => { setmerData({ ...merData, username: e.target.value  }) }} type=\"text\" className=\"app-modal-form-field w-input\"  placeholder=\"Username\"  required/>\r\n        </div>\r\n        <div className=\"form-flex-col\">\r\n        <input onChange={ (e) => { setmerData({ ...merData, password: e.target.value  }) }} type=\"text\" className=\"app-modal-form-field w-input\"  placeholder=\"Password\"  required/>\r\n        </div>\r\n        <div className=\"form-flex-col\">\r\n        <input onChange={ (e) => { setmerData({ ...merData, transactionPin: e.target.value  }) }} type=\"text\" className=\"app-modal-form-field w-input\"  placeholder=\"Transaction Pin\"  required/>\r\n        </div>\r\n        <div className=\"form-flex-col\">\r\n        <input onChange={ (e) => { setmerData({ ...merData, merchantName: e.target.value  }) }} type=\"text\" className=\"app-modal-form-field w-input\"  placeholder=\"Merchant Name\"  required/>\r\n        </div>\r\n        <div className=\"form-flex-col\">\r\n        <input onChange={ (e) => { setmerData({ ...merData, contactPersonName: e.target.value  }) }} type=\"text\" className=\"app-modal-form-field w-input\"  placeholder=\"Contact Person Name\"  required/>\r\n       </div>\r\n        <div className=\"form-flex-col\"> \r\n        <input onChange={ (e) => { setmerData({ ...merData, phoneNumber: e.target.value  }) }} type=\"text\" className=\"app-modal-form-field w-input\"  placeholder=\"Phone Number\"  required/>\r\n        </div>\r\n        <div className=\"form-flex-col\">\r\n        <input onChange={ (e) => { setmerData({ ...merData, emailAddress: e.target.value  }) }} type=\"email\" className=\"app-modal-form-field w-input\"  placeholder=\"Email Address\"  required/>\r\n        </div>\r\n        <div className=\"form-flex-col\">\r\n        <input onChange={ (e) => { setmerData({ ...merData, logoUrl: e.target.value  }) }} type=\"text\" className=\"app-modal-form-field w-input\"  placeholder=\"Logo Url\"  required/>\r\n        </div>\r\n        <div className=\"form-flex-col\">\r\n        <input onChange={ (e) => { setmerData({ ...merData, bvn: e.target.value  }) }} type=\"text\" className=\"app-modal-form-field w-input\"  placeholder=\"BVN\"  required/>\r\n        </div>\r\n        <div className=\"form-flex-col\">\r\n        <input onChange={ (e) => { setmerData({ ...merData, addressLine1: e.target.value  }) }} type=\"text\" className=\"app-modal-form-field w-input\"  placeholder=\"Address 1\"  required/>\r\n        </div>\r\n        <div className=\"form-flex-col\">\r\n        <input onChange={ (e) => { setmerData({ ...merData, addressLine2: e.target.value  }) }} type=\"text\" className=\"app-modal-form-field w-input\"  placeholder=\"Address 2\"  required/>\r\n        </div>\r\n        <div className=\"form-flex-col\">\r\n        <input onChange={ (e) => { setmerData({ ...merData, state: e.target.value  }) }} type=\"text\" className=\"app-modal-form-field w-input\"  placeholder=\"State\"  required/>\r\n        </div>\r\n        <div className=\"form-flex-col\">\r\n        <input onChange={ (e) => { setmerData({ ...merData, lga: e.target.value  }) }} type=\"text\" className=\"app-modal-form-field w-input\"  placeholder=\"LGA\"  required/>\r\n        </div>\r\n        <div className=\"form-flex-col\">\r\n        <input onChange={ (e) => { setmerData({ ...merData, city: e.target.value  }) }} type=\"text\" className=\"app-modal-form-field w-input\"  placeholder=\"City\"  required/>\r\n        </div>\r\n        <div className=\"form-flex-col\">\r\n        <select required style={{ marginBottom: '30px'}} onChange={ (e) => setmerData({ ...merData, bandName: e.target.value  })}  className=\"app-select w-select\">\r\n        <option selected disabled>Select a Band</option>\r\n              {\r\n                  props.bands.map(result => {\r\n                      return <option key={result.id} value={ result.bandName }>{result.bandName}</option>\r\n                  })\r\n              }\r\n        \r\n            </select>\r\n        </div>\r\n        <div className=\"form-flex-col\">\r\n        <select required style={{ marginBottom: '30px'}} onChange={ (e) => setmerData({ ...merData, roleName: e.target.value  })}  className=\"app-select w-select\">\r\n              <option selected disabled>Select a Role</option>\r\n              {\r\n                  props.roles.map(result => {\r\n                      return <option key={result.id} value={ result.roleName }>{result.roleName}</option>\r\n                  })\r\n              }\r\n        \r\n            </select>\r\n        </div>\r\n        <div className=\"form-flex-col\">\r\n        <input value = { ip } onChange={ (e) => { setIp(e.target.value)}} type=\"text\" className=\"app-modal-form-field w-input\"  placeholder=\"IP Address\" />\r\n        <div style={{marginRight:\"20px\",marginTop:\"-59px\",display:\"inline-block\", float:'right', cursor: 'pointer', textDecoration: 'underline', color:'#c00'}} onClick={addtoArray}>Add IP</div>\r\n        <br/>\r\n        {\r\n                  modalArray.map((result, index) => {\r\n                    return(\r\n                      <div style={{marginTop:\"-50px\"}} key={result} style={{marginRight:'20px',marginBottom:'20px', background: '#ededed', padding:'10px', borderRadius:'5px', display:'inline-block', color: '#696969', fontSize: '13px'}}>\r\n                 {result} <span onClick={()=>{ removePerm(index)}} style={{ cursor: 'pointer', fontWeight: 'bold', color:'red', marginLeft:'10px'}}>X</span>\r\n               </div>\r\n                    )\r\n                  })\r\n                }\r\n        </div>        \r\n</div>\r\n\r\n         \r\n<button type=\"submit\" style={{cursor:'pointer'}} className=\"app-modal-button\">Create Merchant</button>\r\n</form>\r\n    </div>\r\n\r\n      </div>\r\n      </div>\r\n    }\r\n          \r\n        </>\r\n    )\r\n}","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\orgForm.js",["338","339","340","341","342"],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\components\\ui\\state\\state2.js",["343"],"import React from 'react'\r\nexport default function State2({state, closeModal, closeSession, message, sessionId}) {\r\n    return(\r\n        <>\r\n        <div style={{ zIndex : 999999 }}className=\"app-modal-overlay\">\r\n    <div className=\"app-modal-div success\" style={{ textAlign:'center'}}>\r\n        {\r\n            state == 'success' ?  <div > <div className=\"alert-icon\"></div>\r\n             <div className=\"alert-message\"  style={{width:'200px'}}>{message}</div>\r\n             <div style={{marginTop:'15px', fontSize:'13px'}}>{sessionId}</div>\r\n            <div onClick={closeSession} style={{marginTop:'15px',cursor:'pointer'}} className=\"app-modal-button\">Close</div>\r\n             </div> : \r\n            \r\n            <div> \r\n            <div className=\"alert-icon failed\"></div>\r\n            <div className=\"alert-message\"  style={{width:'200px'}}>{message}</div>\r\n            <div onClick={closeModal} style={{marginTop:'15px',cursor:'pointer'}} className=\"app-modal-button\">Try again</div>\r\n            </div>    \r\n        } \r\n    </div>\r\n  </div>\r\n        </>\r\n    )\r\n}","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\organisation\\addMerchant.js",["344"],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\components\\ui\\emptyData\\emptyData.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\utils.js",[],["345","346"],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\user-management\\addUser.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\settings\\terminal\\terminal.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\service-providers\\provider\\charges.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\service-providers\\provider\\editProvider.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\service-providers\\provider\\fundProvider.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\transactions\\transactions.js",["347","348","349","350","351","352","353","354"],"\r\nimport React, { useState, useEffect } from 'react'\r\nimport Leftbar from '../../components/leftbar/leftbar'\r\nimport Rightbar from '../../components/rightbar/rightbar'\r\nimport { Link } from 'react-router-dom'\r\nimport { Redirect} from 'react-router-dom'\r\nimport { getTransactionsAll,getServiceProviders } from '../../globalApi'\r\nimport Loader from '../../components/ui/loader/loader'\r\nimport ViewTrans from './viewTrans'\r\nimport ExportReport from '../Export'\r\nimport NumberFormat from 'react-number-format';\r\nimport EmptyData from '../../components/ui/emptyData/emptyData'\r\nexport default function Transactions() {\r\n    \r\n  const [transactions, setTransactions] = useState([]);\r\n  const [alltransactions, setAllTransactions] = useState([]);\r\n  const [transDetails, setTransDetails] = useState({});\r\n  const [loader, setLoader] = useState(false);\r\n const [trans, setTrans] = useState({})\r\n const [viewTrans, setViewTrans] = useState(false)\r\n const [exportreport, setExport] = useState(false)\r\n const [newpage, setNewPage] = useState(0)\r\n const [newrecord, setNewRecord] = useState(10)\r\n const [providers, setProviders] = useState([]);\r\n const [ startDate, setStartDate] = useState()\r\n const [ endDate, setEndDate] = useState()\r\n\r\n\r\n let defaultPage = localStorage.getItem('tcP')\r\n let defaultRecords = localStorage.getItem('tR')\r\n\r\n\r\n \r\n  useEffect(() => { \r\n    setNewPage(defaultPage)\r\n    setNewRecord(defaultRecords)\r\n    getTransactionsAll(defaultPage,defaultRecords).then(async(result) => {\r\n       setTransDetails(result); \r\n       const res = await result.data.sort(function(a, b) {\r\n        var c = new Date(a.transactionDate);\r\n        var d = new Date(b.transactionDate);\r\n        return d-c;\r\n    });\r\n      setTransactions(res)});\r\n      getServiceProviders().then(result => setProviders(result));\r\n  }, [])\r\n\r\n  const getTrans = async(result) => {\r\n  await setTrans(result)\r\n   viewTrans ? setViewTrans(false) :  setViewTrans(true)\r\n  }\r\n  \r\n  const toggleTrans = () => {\r\n    viewTrans ? setViewTrans(false) :  setViewTrans(true)\r\n  }\r\n\r\n  const toggleExport = async() => {\r\n    setLoader(true)\r\n    await getTransactionsAll(1,transDetails.totalRecords).then(async(result) => {\r\n     setAllTransactions(result.data)});\r\n     setLoader(false)\r\n    exportreport ? setExport(false) :  setExport(true)\r\n  }\r\n\r\n  const prevPage = () => {\r\n    let currentPage = localStorage.getItem('tcP');\r\n    let defaultRecords = localStorage.getItem('tR')\r\n      let page = parseInt(currentPage) - 1\r\n      if(page > 0){\r\n        setLoader(true)\r\n      getTransactionsAll(page,defaultRecords).then(async(result) => { \r\n        setTransDetails(result); \r\n        const res = await result.data.sort(function(a, b) {\r\n         var c = new Date(a.transactionDate);\r\n         var d = new Date(b.transactionDate);\r\n         return d-c;\r\n     });\r\n       setTransactions(res);\r\n       setNewPage(page)\r\n        setLoader(false)});\r\n      }\r\n      else{\r\n        return false\r\n      }\r\n  }\r\n  \r\n  const nextPage = () => {\r\n  let currentPage = localStorage.getItem('tcP');\r\n  let defaultRecords = localStorage.getItem('tR')\r\n    let page = parseInt(currentPage) + 1\r\n    if(transDetails.lastPage >= page){\r\n      setLoader(true)\r\n       getTransactionsAll(page,defaultRecords).then(async(result) => {\r\n        setTransDetails(result); \r\n        const res = await result.data.sort(function(a, b) {\r\n         var c = new Date(a.transactionDate);\r\n         var d = new Date(b.transactionDate);\r\n         return d-c;\r\n     });\r\n       setTransactions(res);\r\n       setNewPage(page)\r\n          setLoader(false)});\r\n    }\r\n    else{\r\n      return false\r\n    }\r\n  }\r\n\r\n  const goToPage = (e) =>{\r\n    if (e.key === 'Enter') {\r\n    let defaultRecords = localStorage.getItem('tR')\r\n      if(transDetails.lastPage >= newpage){\r\n        setLoader(true)\r\n         getTransactionsAll(newpage,defaultRecords).then(async(result) => {\r\n          setTransDetails(result); \r\n          const res = await result.data.sort(function(a, b) {\r\n           var c = new Date(a.transactionDate);\r\n           var d = new Date(b.transactionDate);\r\n\r\n           return d-c;\r\n       });\r\n         setTransactions(res)\r\n         setNewPage(newpage)\r\n          setLoader(false)});\r\n      }\r\n      else{\r\n        return false\r\n      }\r\n    }\r\n    else{\r\n      return false\r\n    }\r\n  }\r\n\r\n  const modifyRecords = (e) =>{\r\n    if (e.key === 'Enter') {\r\n    if(transDetails.lastPage >= newpage){\r\n      setLoader(true)\r\n    getTransactionsAll(newpage,newrecord).then(async(result) => {\r\n      \r\n      setTransDetails(result); \r\n      const res = await result.data.sort(function(a, b) {\r\n       var c = new Date(a.transactionDate);\r\n       var d = new Date(b.transactionDate);\r\n       return d-c;\r\n   });\r\n     setTransactions(res)\r\n     setNewPage(newpage)\r\n     setNewRecord()\r\n      setLoader(false)});\r\n    }\r\n    else{\r\n      return false\r\n    }\r\n  }\r\n  else{\r\n    return false\r\n  }\r\n  }\r\n\r\n     \r\n\r\n  const filterByStatus = (status) =>{\r\n    if( status == \"All\") {\r\n      setLoader(true)\r\n      return getTransactionsAll(1,10).then(async(result) => {\r\n        setTransDetails(result); \r\n        const res = await result.data.sort(function(a, b) {\r\n         var c = new Date(a.transactionDate);\r\n         var d = new Date(b.transactionDate);\r\n         return d-c;\r\n     });\r\n       setTransactions(res)\r\n       let currentPage = localStorage.getItem('tcP');\r\n       let defaultRecords = localStorage.getItem('tR')\r\n       setNewPage(currentPage)\r\n       setNewRecord(defaultRecords)\r\n       setLoader(false)\r\n      });\r\n      \r\n    }\r\n    setLoader(true)\r\n          getTransactionsAll(1,transDetails.totalRecords).then(async(result) => {\r\n      setTransDetails(result); \r\n      const res = await result.data.sort(function(a, b) {\r\n       var c = new Date(a.transactionDate);\r\n       var d = new Date(b.transactionDate);\r\n       return d-c;\r\n   });\r\n     const trans = res.filter( x => { return x.transactionStatus == status})\r\n     setTransactions(trans)});\r\n     let currentPage = localStorage.getItem('tcP');\r\n     let defaultRecords = localStorage.getItem('tR')\r\n     setNewPage(currentPage)\r\n     setNewRecord(defaultRecords)\r\n     setLoader(false)\r\n  }\r\n\r\n\r\n  const filterByProvider = (provider) =>{\r\n    let currentPage = localStorage.getItem('tcP');\r\n    let defaultRecords = localStorage.getItem('tR')\r\n    if( provider == \"0\") {\r\n      setLoader(true)\r\n      return getTransactionsAll(1,10).then(async(result) => {\r\n        setTransDetails(result); \r\n        const res = await result.data.sort(function(a, b) {\r\n         var c = new Date(a.transactionDate);\r\n         var d = new Date(b.transactionDate);\r\n         return d-c;\r\n     });\r\n       setTransactions(res)\r\n       let currentPage = localStorage.getItem('tcP');\r\n       let defaultRecords = localStorage.getItem('tR')\r\n       setNewPage(currentPage)\r\n       setNewRecord(defaultRecords)\r\n       setLoader(false)\r\n      }\r\n       \r\n       );\r\n      \r\n    }\r\n    setLoader(true)\r\n    getTransactionsAll(1,transDetails.totalRecords).then(async(result) => {\r\n      setTransDetails(result); \r\n      const res = await result.data.sort(function(a, b) {\r\n       var c = new Date(a.transactionDate);\r\n       var d = new Date(b.transactionDate);\r\n       return d-c;\r\n   });\r\n     const trans = res.filter( x => { return x.providerName == provider})\r\n     setTransactions(trans);\r\n     let currentPage = localStorage.getItem('tcP');\r\n     let defaultRecords = localStorage.getItem('tR')\r\n     setNewPage(currentPage)\r\n     setNewRecord(defaultRecords)\r\n     setLoader(false)});\r\n  }\r\n\r\n  const filterByDate = async (e) => {\r\n    e.preventDefault();\r\n    setLoader(true)\r\n    await getTransactionsAll(1,transDetails.totalRecords).then(async(result) => {\r\n      setTransDetails(result); \r\nconst newTrans = await result.data.filter(item => {\r\n   const transDate = new Date(item.transactionDate).toISOString().substr(0,10);\r\n   return transDate >= startDate && transDate <= endDate;\r\n})\r\nsetTransactions(newTrans);\r\nlet currentPage = localStorage.getItem('tcP');\r\nlet defaultRecords = localStorage.getItem('tR')\r\nsetNewPage(currentPage)\r\nsetNewRecord(defaultRecords)\r\nsetLoader(false);\r\n});\r\n\r\n}\r\n\r\n    if (!localStorage.getItem(\"token\")) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n\r\n        return(\r\n          <div>\r\n            <div className=\"app-admin-section\">\r\n            { viewTrans ? <ViewTrans trans={trans} closeModal={toggleTrans}/> : null }\r\n            {exportreport ? <ExportReport alltransactions={alltransactions} closeModal={toggleExport}/> : null}\r\n            { loader ? <Loader/> : null }\r\n            <div className=\"app-admin-col-1\">\r\n            <Leftbar/>\r\n            </div>\r\n            <div className=\"app-admin-col-2\">\r\n            <div className=\"admin-top-bar\">\r\n        <div className=\"admin-top-bar-left\">\r\n         <Link style={{ textDecoration: 'none'}} to=\"/service-providers\"><div className=\"settings-icon\"></div></Link> \r\n        </div>\r\n        <div className=\"admin-top-bar-right\">\r\n          <div className=\"admin-topbar-date\">October 8th, 2020</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"app-table-actions\">\r\n                    <div className=\"app-table-search\">\r\n                    <div className=\"content-header\">Paysure Core - Transactions</div>\r\n                    <div className=\"content-sub\">Here are the latest report on Paysure Core</div>\r\n                    </div>\r\n                    <div className=\"app-table-buttons\">\r\n                    {\r\n                         transactions.length <= 0 ? '' : \r\n                         <div onClick={toggleExport} style={{cursor:'pointer'}} className=\"table-button filter\">Export Report<span className=\"table-button-icon\"></span></div>\r\n\r\n                      }                    </div>\r\n                </div>\r\n                {\r\n              transactions.length <= 0 ? <EmptyData/> :\r\n                <div>\r\n      <div className=\"app-table-actions\">\r\n        <div>\r\n          <form className=\"app-table-select\" onSubmit={filterByDate}>\r\n                   <input onChange = { (event) => setStartDate(event.target.value) } style={{ marginRight:'20px',width:'40%'}} type=\"date\" className=\"app-modal-form-field w-input\"   required/>\r\n        <input onChange = { (event) => setEndDate(event.target.value) } style={{ marginRight:'20px',width:'40%'}}  type=\"date\" className=\"app-modal-form-field w-input\"   required/>\r\n        <button type=\"submit\" style={{fontSize:'15px',cursor:'pointer',height:'40px'}} className=\"app-icon table-button filter\"><span className=\"table-button-icon\"></span></button> \r\n          </form>\r\n\r\n          </div>\r\n        <div className=\"app-table-select\">\r\n                  <select style={{ marginRight:'20px'}}  onChange={ (e) => filterByStatus(e.target.value)}  className=\"app-select w-select\">\r\n                                      <option selected disabled>Filter by Status</option>\r\n                                      <option value=\"All\">All</option>\r\n                                      <option value=\"0\">Successful</option>\r\n                                      <option value=\"1\">Failed</option>\r\n                                    </select>\r\n                                    <select  onChange={ (e) => filterByProvider(e.target.value)}  className=\"app-select w-select\">\r\n                                      <option selected disabled>Filter by Provider</option>\r\n                                      <option value=\"All\">All</option>\r\n                                      {\r\n                                          providers.map(result => {\r\n                                              return <option key={result.id} value={ result.providerName }>{result.providerName}</option>\r\n                                          })\r\n                                      }\r\n                                \r\n                                    </select>\r\n\r\n        </div>\r\n      </div>\r\n      <div>\r\n      <table className=\"app-table2\">\r\n                                  <thead>\r\n                                      <tr className=\"app-table2-row\">\r\n                                      <th className=\"app-table2-header\">Provider</th>\r\n                                      <th className=\"app-table2-header\">Channel</th>\r\n                                      <th className=\"app-table2-header\">Service</th>\r\n                                      <th className=\"app-table2-header\">Total Amount</th>\r\n                                    <th className=\"app-table2-header\">Trans-Status</th>\r\n                                    <th className=\"app-table2-header\">Trans.Date</th>\r\n                                    <th className=\"app-table2-header\"></th>\r\n                                  </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n                                  {\r\n                                      transactions.map( result => {\r\n                                        return(\r\n                                     <tr key={result.id} className=\"app-table2-row\">\r\n                                        <td className=\"app-table2-data\">{result.providerName}</td>\r\n                                        <td className=\"app-table2-data\">{result.channel}</td>\r\n                                        <td className=\"app-table2-data\">{result.serviceName}</td>\r\n                                        <td className=\"app-table2-data\">\r\n                                        <NumberFormat value={result.amount} displayType={'text'} thousandSeparator={true} prefix={'₦'} renderText={(value, props) => <div {...props}>{value}</div>} />\r\n                                          </td>\r\n                                        { result.transactionStatus == 0 ? \r\n                                          <td className=\"app-table2-data table-active\">Successful</td> \r\n                                        : \r\n                                        <td className=\"app-table2-data table-inactive\">Failed</td>\r\n                                        }\r\n                                        <td className=\"app-table2-data\">{result.transactionDate}</td>\r\n                                        <td className=\"app-table2-data\" style={{ color: '#131573', fontWeight: 'bold', cursor: 'pointer' }}>\r\n                                        <div onClick={ () => { getTrans(result)}}>View Details <span className=\"app-icon\"></span></div>\r\n                                        </td>\r\n                                  </tr>\r\n                                        )\r\n                                      })\r\n                                    }                                \r\n                                  </tbody>                  \r\n                                  </table>\r\n      </div>\r\n             <div className=\"pagination\">\r\n       <div className=\"pag-col-1\">\r\n         <div className=\"pag-s\"><input onKeyDown={modifyRecords} value={newrecord}  onChange = { (event) => setNewRecord(event.target.value) } className=\"pag-input\" type=\"number\" name=\"page\" max=\"13\" /></div>\r\n         <div className=\"pag-s\"><span style={{marginRight:'10px'}} className=\"pag-s-text\">of {transDetails.totalRecords}</span></div>\r\n       </div>\r\n       <div className=\"pag-col-2\">\r\n        <div className=\"pag-prev\" onClick={ prevPage }>Previous Page</div>\r\n        <div className=\"pag-next\" onClick={ nextPage }>Next Page</div>\r\n       </div>\r\n       <div className=\"pag-col-3\">\r\n         <div className=\"pag-s\"><span className=\"pag-s-text\">Page</span></div>\r\n         <div className=\"pag-s\"><input onKeyDown={goToPage} value={newpage}  onChange = { (event) => setNewPage(event.target.value) } className=\"pag-input\" type=\"number\" name=\"page\" max=\"13\" /></div>\r\n         <div className=\"pag-s\"><span style={{marginRight:'10px'}} className=\"pag-s-text\">of</span><span className=\"pag-s-text\">{transDetails.lastPage}</span></div>\r\n       </div>\r\n      </div>\r\n</div>\r\n}\r\n\r\n    </div>\r\n      <div className=\"app-admin-col-3\">\r\n              <Rightbar />\r\n            </div>\r\n</div>\r\n</div>\r\n    )\r\n}\r\n","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\transactions\\viewTrans.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\helpers\\axios.js",["355"],"import axios from \"axios\";\r\n\r\nexport default (history = null) => {\r\n  const baseURL = process.env.REACT_APP_BACKEND_URL;\r\n\r\n\r\n  let headers = {};\r\n\r\n  if (localStorage.token) {\r\n    headers.Authorization = `Bearer ${localStorage.token}`;\r\n  }\r\n\r\n  const axiosInstance = axios.create({\r\n    baseURL: baseURL,\r\n    headers,\r\n  });\r\n\r\n  axiosInstance.interceptors.response.use(\r\n    (response) =>\r\n      new Promise((resolve, reject) => {\r\n        resolve(response);\r\n      }),\r\n    (error) => {\r\n      if (!error.response) {\r\n        return new Promise((resolve, reject) => {\r\n          reject(error);\r\n        });\r\n      }\r\n\r\n      if (error.response.status === 401) {\r\n        localStorage.removeItem(\"token\");\r\n        localStorage.removeItem(\"user\");\r\n        localStorage.removeItem(\"orgCode\");\r\n\r\n        if (history) {\r\n            window.location = \"/\";\r\n          console.log('win')\r\n        } else {\r\n          window.location = \"/\";\r\n          console.log('lose')\r\n        }\r\n      } else {\r\n        return new Promise((resolve, reject) => {\r\n          reject(error);\r\n        });\r\n      }\r\n    }\r\n  );\r\n\r\n  return axiosInstance;\r\n};","C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\Export.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\service-providers\\provider\\viewTrans.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\organisation\\merchant\\viewTrans.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\organisations\\organisation\\merchant\\addPermission.js",[],"C:\\Users\\Admin\\Documents\\paysure-core\\src\\pages\\settings\\config\\config.js",["356","357","358","359","360"],{"ruleId":"361","replacedBy":"362"},{"ruleId":"363","replacedBy":"364"},{"ruleId":"365","severity":1,"message":"366","line":11,"column":8,"nodeType":"367","messageId":"368","endLine":11,"endColumn":21},{"ruleId":"365","severity":1,"message":"369","line":18,"column":10,"nodeType":"367","messageId":"368","endLine":18,"endColumn":21},{"ruleId":"365","severity":1,"message":"370","line":21,"column":10,"nodeType":"367","messageId":"368","endLine":21,"endColumn":15},{"ruleId":"371","severity":1,"message":"372","line":36,"column":6,"nodeType":"373","endLine":36,"endColumn":8,"suggestions":"374"},{"ruleId":"375","severity":1,"message":"376","line":273,"column":36,"nodeType":"377","messageId":"378","endLine":273,"endColumn":38},{"ruleId":"361","replacedBy":"379"},{"ruleId":"363","replacedBy":"380"},{"ruleId":"365","severity":1,"message":"381","line":3,"column":10,"nodeType":"367","messageId":"368","endLine":3,"endColumn":23},{"ruleId":"365","severity":1,"message":"382","line":3,"column":25,"nodeType":"367","messageId":"368","endLine":3,"endColumn":30},{"ruleId":"365","severity":1,"message":"383","line":3,"column":32,"nodeType":"367","messageId":"368","endLine":3,"endColumn":38},{"ruleId":"365","severity":1,"message":"384","line":7,"column":8,"nodeType":"367","messageId":"368","endLine":7,"endColumn":16},{"ruleId":"365","severity":1,"message":"385","line":8,"column":8,"nodeType":"367","messageId":"368","endLine":8,"endColumn":16},{"ruleId":"361","replacedBy":"386"},{"ruleId":"363","replacedBy":"387"},{"ruleId":"365","severity":1,"message":"388","line":15,"column":10,"nodeType":"367","messageId":"368","endLine":15,"endColumn":18},{"ruleId":"365","severity":1,"message":"389","line":16,"column":10,"nodeType":"367","messageId":"368","endLine":16,"endColumn":18},{"ruleId":"365","severity":1,"message":"390","line":27,"column":13,"nodeType":"367","messageId":"368","endLine":27,"endColumn":31},{"ruleId":"365","severity":1,"message":"391","line":32,"column":13,"nodeType":"367","messageId":"368","endLine":32,"endColumn":31},{"ruleId":"392","severity":1,"message":"393","line":82,"column":11,"nodeType":"394","endLine":82,"endColumn":83},{"ruleId":"365","severity":1,"message":"395","line":23,"column":12,"nodeType":"367","messageId":"368","endLine":23,"endColumn":19},{"ruleId":"365","severity":1,"message":"396","line":23,"column":21,"nodeType":"367","messageId":"368","endLine":23,"endColumn":31},{"ruleId":"365","severity":1,"message":"397","line":24,"column":12,"nodeType":"367","messageId":"368","endLine":24,"endColumn":21},{"ruleId":"365","severity":1,"message":"398","line":24,"column":23,"nodeType":"367","messageId":"368","endLine":24,"endColumn":35},{"ruleId":"365","severity":1,"message":"399","line":25,"column":9,"nodeType":"367","messageId":"368","endLine":25,"endColumn":20},{"ruleId":"365","severity":1,"message":"400","line":26,"column":9,"nodeType":"367","messageId":"368","endLine":26,"endColumn":23},{"ruleId":"371","severity":1,"message":"401","line":29,"column":16,"nodeType":"402","endLine":39,"endColumn":8},{"ruleId":"371","severity":1,"message":"403","line":39,"column":9,"nodeType":"373","endLine":39,"endColumn":11,"suggestions":"404"},{"ruleId":"365","severity":1,"message":"405","line":57,"column":11,"nodeType":"367","messageId":"368","endLine":57,"endColumn":29},{"ruleId":"365","severity":1,"message":"406","line":3,"column":10,"nodeType":"367","messageId":"368","endLine":3,"endColumn":14},{"ruleId":"365","severity":1,"message":"407","line":13,"column":24,"nodeType":"367","messageId":"368","endLine":13,"endColumn":39},{"ruleId":"371","severity":1,"message":"408","line":30,"column":6,"nodeType":"373","endLine":30,"endColumn":8,"suggestions":"409"},{"ruleId":"375","severity":1,"message":"376","line":222,"column":68,"nodeType":"377","messageId":"378","endLine":222,"endColumn":70},{"ruleId":"392","severity":1,"message":"393","line":16,"column":11,"nodeType":"394","endLine":16,"endColumn":51},{"ruleId":"392","severity":1,"message":"393","line":30,"column":11,"nodeType":"394","endLine":30,"endColumn":51},{"ruleId":"392","severity":1,"message":"393","line":31,"column":11,"nodeType":"394","endLine":31,"endColumn":52},{"ruleId":"375","severity":1,"message":"376","line":54,"column":57,"nodeType":"377","messageId":"378","endLine":54,"endColumn":59},{"ruleId":"371","severity":1,"message":"403","line":31,"column":8,"nodeType":"373","endLine":31,"endColumn":10,"suggestions":"410"},{"ruleId":"365","severity":1,"message":"411","line":2,"column":8,"nodeType":"367","messageId":"368","endLine":2,"endColumn":13},{"ruleId":"375","severity":1,"message":"376","line":299,"column":31,"nodeType":"377","messageId":"378","endLine":299,"endColumn":33},{"ruleId":"371","severity":1,"message":"403","line":28,"column":6,"nodeType":"373","endLine":28,"endColumn":8,"suggestions":"412"},{"ruleId":"371","severity":1,"message":"413","line":38,"column":6,"nodeType":"373","endLine":38,"endColumn":11,"suggestions":"414"},{"ruleId":"371","severity":1,"message":"415","line":35,"column":10,"nodeType":"373","endLine":35,"endColumn":12,"suggestions":"416"},{"ruleId":"365","severity":1,"message":"417","line":77,"column":13,"nodeType":"367","messageId":"368","endLine":77,"endColumn":24},{"ruleId":"375","severity":1,"message":"376","line":165,"column":18,"nodeType":"377","messageId":"378","endLine":165,"endColumn":20},{"ruleId":"365","severity":1,"message":"418","line":2,"column":27,"nodeType":"367","messageId":"368","endLine":2,"endColumn":36},{"ruleId":"392","severity":1,"message":"393","line":58,"column":11,"nodeType":"394","endLine":58,"endColumn":81},{"ruleId":"375","severity":1,"message":"376","line":8,"column":19,"nodeType":"377","messageId":"378","endLine":8,"endColumn":21},{"ruleId":"371","severity":1,"message":"403","line":28,"column":6,"nodeType":"373","endLine":28,"endColumn":8,"suggestions":"419"},{"ruleId":"371","severity":1,"message":"420","line":43,"column":6,"nodeType":"373","endLine":43,"endColumn":8,"suggestions":"421"},{"ruleId":"375","severity":1,"message":"376","line":161,"column":16,"nodeType":"377","messageId":"378","endLine":161,"endColumn":18},{"ruleId":"375","severity":1,"message":"376","line":187,"column":66,"nodeType":"377","messageId":"378","endLine":187,"endColumn":68},{"ruleId":"365","severity":1,"message":"417","line":198,"column":9,"nodeType":"367","messageId":"368","endLine":198,"endColumn":20},{"ruleId":"365","severity":1,"message":"400","line":199,"column":9,"nodeType":"367","messageId":"368","endLine":199,"endColumn":23},{"ruleId":"375","severity":1,"message":"376","line":200,"column":18,"nodeType":"377","messageId":"378","endLine":200,"endColumn":20},{"ruleId":"375","severity":1,"message":"376","line":228,"column":61,"nodeType":"377","messageId":"378","endLine":228,"endColumn":63},{"ruleId":"375","severity":1,"message":"376","line":334,"column":68,"nodeType":"377","messageId":"378","endLine":334,"endColumn":70},{"ruleId":"365","severity":1,"message":"422","line":7,"column":10,"nodeType":"367","messageId":"368","endLine":7,"endColumn":14},{"ruleId":"365","severity":1,"message":"423","line":7,"column":16,"nodeType":"367","messageId":"368","endLine":7,"endColumn":23},{"ruleId":"375","severity":1,"message":"376","line":72,"column":57,"nodeType":"377","messageId":"378","endLine":72,"endColumn":59},{"ruleId":"365","severity":1,"message":"424","line":18,"column":13,"nodeType":"367","messageId":"368","endLine":18,"endColumn":21},{"ruleId":"365","severity":1,"message":"425","line":18,"column":23,"nodeType":"367","messageId":"368","endLine":18,"endColumn":34},{"ruleId":"426","severity":1,"message":"427","line":260,"column":69,"nodeType":"428","endLine":260,"endColumn":236},{"ruleId":"365","severity":1,"message":"429","line":6,"column":8,"nodeType":"367","messageId":"368","endLine":6,"endColumn":14},{"ruleId":"365","severity":1,"message":"430","line":7,"column":8,"nodeType":"367","messageId":"368","endLine":7,"endColumn":14},{"ruleId":"365","severity":1,"message":"431","line":13,"column":12,"nodeType":"367","messageId":"368","endLine":13,"endColumn":20},{"ruleId":"365","severity":1,"message":"432","line":18,"column":11,"nodeType":"367","messageId":"368","endLine":18,"endColumn":20},{"ruleId":"365","severity":1,"message":"433","line":51,"column":11,"nodeType":"367","messageId":"368","endLine":51,"endColumn":20},{"ruleId":"375","severity":1,"message":"376","line":8,"column":19,"nodeType":"377","messageId":"378","endLine":8,"endColumn":21},{"ruleId":"426","severity":1,"message":"427","line":172,"column":69,"nodeType":"428","endLine":172,"endColumn":236},{"ruleId":"361","replacedBy":"434"},{"ruleId":"363","replacedBy":"435"},{"ruleId":"371","severity":1,"message":"415","line":46,"column":6,"nodeType":"373","endLine":46,"endColumn":8,"suggestions":"436"},{"ruleId":"375","severity":1,"message":"376","line":164,"column":16,"nodeType":"377","messageId":"378","endLine":164,"endColumn":18},{"ruleId":"375","severity":1,"message":"376","line":190,"column":66,"nodeType":"377","messageId":"378","endLine":190,"endColumn":68},{"ruleId":"365","severity":1,"message":"417","line":201,"column":9,"nodeType":"367","messageId":"368","endLine":201,"endColumn":20},{"ruleId":"365","severity":1,"message":"400","line":202,"column":9,"nodeType":"367","messageId":"368","endLine":202,"endColumn":23},{"ruleId":"375","severity":1,"message":"376","line":203,"column":18,"nodeType":"377","messageId":"378","endLine":203,"endColumn":20},{"ruleId":"375","severity":1,"message":"376","line":231,"column":61,"nodeType":"377","messageId":"378","endLine":231,"endColumn":63},{"ruleId":"375","severity":1,"message":"376","line":349,"column":68,"nodeType":"377","messageId":"378","endLine":349,"endColumn":70},{"ruleId":"437","severity":1,"message":"438","line":3,"column":1,"nodeType":"439","endLine":51,"endColumn":3},{"ruleId":"375","severity":1,"message":"376","line":48,"column":34,"nodeType":"377","messageId":"378","endLine":48,"endColumn":36},{"ruleId":"375","severity":1,"message":"376","line":48,"column":57,"nodeType":"377","messageId":"378","endLine":48,"endColumn":59},{"ruleId":"375","severity":1,"message":"376","line":51,"column":39,"nodeType":"377","messageId":"378","endLine":51,"endColumn":41},{"ruleId":"375","severity":1,"message":"376","line":51,"column":57,"nodeType":"377","messageId":"378","endLine":51,"endColumn":59},{"ruleId":"375","severity":1,"message":"376","line":55,"column":37,"nodeType":"377","messageId":"378","endLine":55,"endColumn":39},"no-native-reassign",["440"],"no-negated-in-lhs",["441"],"no-unused-vars","'ApiManagement' is defined but never used.","Identifier","unusedVar","'usersLength' is assigned a value but never used.","'trans' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["442"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["440"],["441"],"'BrowserRouter' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'Overview' is defined but never used.","'Products' is defined but never used.",["440"],["441"],"'provider' is assigned a value but never used.","'services' is assigned a value but never used.","'toggleEditProvider' is assigned a value but never used.","'toggleFundProvider' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'newpage' is assigned a value but never used.","'setNewPage' is assigned a value but never used.","'newrecord' is assigned a value but never used.","'setNewRecord' is assigned a value but never used.","'defaultPage' is assigned a value but never used.","'defaultRecords' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["443"],"'changeTransactions' is assigned a value but never used.","'Link' is defined but never used.","'setTransDetails' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'defaultPage', 'defaultRecords', and 'props.provider.providerName'. Either include them or remove the dependency array.",["444"],["445"],"'axios' is defined but never used.",["446"],"React Hook useEffect has missing dependencies: 'merchants' and 'merchantsCustom'. Either include them or remove the dependency array.",["447"],"React Hook useEffect has missing dependencies: 'defaultPage' and 'defaultRecords'. Either include them or remove the dependency array.",["448"],"'currentPage' is assigned a value but never used.","'useEffect' is defined but never used.",["449"],"React Hook useEffect has missing dependencies: 'defaultPage', 'defaultRecords', and 'id'. Either include them or remove the dependency array.",["450"],"'role' is assigned a value but never used.","'setRole' is assigned a value but never used.","'bandData' is assigned a value but never used.","'setBandData' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'AddOrg' is defined but never used.","'AddMer' is defined but never used.","'orgState' is assigned a value but never used.","'CreateOrg' is assigned a value but never used.","'CreateMer' is assigned a value but never used.",["440"],["441"],["451"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"452","fix":"453"},{"desc":"454","fix":"455"},{"desc":"456","fix":"457"},{"desc":"454","fix":"458"},{"desc":"454","fix":"459"},{"desc":"460","fix":"461"},{"desc":"462","fix":"463"},{"desc":"454","fix":"464"},{"desc":"465","fix":"466"},{"desc":"462","fix":"467"},"Update the dependencies array to be: [history]",{"range":"468","text":"469"},"Update the dependencies array to be: [id]",{"range":"470","text":"471"},"Update the dependencies array to be: [defaultPage, defaultRecords, props.provider.providerName]",{"range":"472","text":"473"},{"range":"474","text":"471"},{"range":"475","text":"471"},"Update the dependencies array to be: [b2b, merchants, merchantsCustom]",{"range":"476","text":"477"},"Update the dependencies array to be: [defaultPage, defaultRecords]",{"range":"478","text":"479"},{"range":"480","text":"471"},"Update the dependencies array to be: [defaultPage, defaultRecords, id]",{"range":"481","text":"482"},{"range":"483","text":"479"},[1722,1724],"[history]",[1687,1689],"[id]",[1202,1204],"[defaultPage, defaultRecords, props.provider.providerName]",[1479,1481],[1314,1316],[1531,1536],"[b2b, merchants, merchantsCustom]",[1450,1452],"[defaultPage, defaultRecords]",[1339,1341],[1743,1745],"[defaultPage, defaultRecords, id]",[1815,1817]]